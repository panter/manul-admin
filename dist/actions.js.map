{"version":3,"sources":["../src/actions.js"],"names":["manulAdmin","gotoCreate","collectionName","gotoRoute","adminContext","getCreateRoute","name","gotoEdit","_id","getEditRoute","gotoList","getListRoute","listSortToggle","newSortProperty","LocalState","localStateSortProperties","sortProperties","get","oldProperty","s","id","newSortProps","sortAscending","set","listSetSort","listSetFilter","filter","listSetSearchTerm","searchTerm","listSetPageProperties","pageProperties","listGotoPage","currentPage","listGotoNextPage","listGotoPreviousPage","update","doc","methods","Alerts","onSuccess","handleCallback","bind","call","props","error","create","destroy","confirmed","window","confirm","exportCsv","docs","filename","fieldsToExport","options","isEmptyObject","field","isFieldToExport","val","key","removeEmptyObjects","pickFieldsToExport","length","transform","data","keysSet","forEach","entry","add","keys","values","exportAsCsv","importCsv","file","onInsert","onUpdate","onComplete","counter","imported","parse","header","dynamicTyping","complete","entryUncleaned","index","checkForComplete","size","unflatten","value"],"mappings":"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","file":"actions.js","sourcesContent":["import Papa from 'papaparse';\nimport _ from 'lodash';\nimport flat from 'flat';\nimport { flow, find, map } from 'lodash/fp';\nimport FallbackAlerts from './fallback_alerts';\nimport csv from './utils/csv';\nimport routeUtils from './utils/route_utils';\nimport { stateListFilter, stateListSort, statePageProperties, stateListSearch } from './utils/local_state_utils';\n\n\nexport default {\n  manulAdmin: {\n    gotoCreate({ adminContext: { gotoRoute } }, collectionName) {\n      gotoRoute(routeUtils.getCreateRoute(collectionName).name);\n    },\n    gotoEdit({ adminContext: { gotoRoute } }, collectionName, _id) {\n      gotoRoute(routeUtils.getEditRoute(collectionName).name, { _id });\n    },\n    gotoList({ adminContext: { gotoRoute } }, collectionName) {\n      gotoRoute(routeUtils.getListRoute(collectionName).name);\n    },\n    // sortProperty is according to react-griddle\n    listSortToggle({ LocalState }, collectionName, newSortProperty) {\n      const localStateSortProperties = stateListSort(collectionName);\n      const sortProperties = LocalState.get(localStateSortProperties) || [];\n      const oldProperty = find(s => s.id === newSortProperty.id)(sortProperties);\n      let newSortProps = [];\n\n      if (!oldProperty) {\n        newSortProps = [{ ...newSortProperty, sortAscending: true }];\n      } else {\n        newSortProps = _.without(sortProperties, oldProperty);\n        if (oldProperty.sortAscending) {\n          newSortProps = [{ ...newSortProperty, sortAscending: false }];\n        }\n      }\n      LocalState.set(localStateSortProperties, newSortProps);\n    },\n    listSetSort({ LocalState }, collectionName, sortProperties) {\n      LocalState.set(stateListSort(collectionName), sortProperties);\n    },\n    listSetFilter({ LocalState }, collectionName, filter) {\n      LocalState.set(stateListFilter(collectionName), filter);\n    },\n    listSetSearchTerm({ LocalState }, collectionName, searchTerm) {\n      LocalState.set(stateListSearch(collectionName), searchTerm);\n    },\n    listSetPageProperties({ LocalState }, collectionName, pageProperties) {\n      LocalState.set(statePageProperties(collectionName), pageProperties);\n    },\n    listGotoPage({ LocalState }, collectionName, currentPage) {\n      const pageProperties = LocalState.get(statePageProperties(collectionName));\n      LocalState.set(statePageProperties(collectionName), { ...pageProperties, currentPage });\n    },\n    listGotoNextPage({ LocalState }, collectionName) {\n      const pageProperties = LocalState.get(statePageProperties(collectionName));\n      LocalState.set(statePageProperties(\n        collectionName),\n        { ...pageProperties, currentPage: pageProperties.currentPage + 1 },\n      );\n    },\n    listGotoPreviousPage({ LocalState }, collectionName) {\n      const pageProperties = LocalState.get(statePageProperties(collectionName));\n      LocalState.set(statePageProperties(\n        collectionName), { ...pageProperties, currentPage: pageProperties.currentPage - 1 },\n      );\n    },\n    update(\n      { adminContext: { methods, gotoRoute }, Alerts = FallbackAlerts },\n      collectionName, doc,\n      onSuccess = () => gotoRoute(routeUtils.getListRoute(collectionName).name),\n    ) {\n      const handleCallback = (\n        (Alerts.handleCallback && Alerts.handleCallback.bind(Alerts)) ||\n        FallbackAlerts.handleCallback.bind(FallbackAlerts)\n      );\n      methods[collectionName].update.call(doc,\n        handleCallback('admin.update', { props: () => ({ collectionName, doc }) }, (error) => {\n          if (!error) {\n            onSuccess({ collectionName, doc, _id: doc._id });\n          }\n        }),\n    );\n    },\n    create(\n      { adminContext: { methods, gotoRoute }, Alerts = FallbackAlerts },\n      collectionName,\n      doc,\n      onSuccess = ({ _id }) => gotoRoute(routeUtils.getEditRoute(collectionName).name, { _id }),\n    ) {\n      const handleCallback = (\n        (Alerts.handleCallback && Alerts.handleCallback.bind(Alerts)) ||\n        FallbackAlerts.handleCallback.bind(FallbackAlerts)\n      );\n      methods[collectionName].create.call(doc,\n        handleCallback('admin.create', { props: () => ({ collectionName, doc }) }, (error, _id) => {\n          if (!error) {\n            onSuccess({ collectionName, _id });\n          }\n        }),\n    );\n    },\n    destroy(\n      { adminContext: { methods, gotoRoute }, Alerts = FallbackAlerts },\n      collectionName, _id,\n      onSuccess = () => gotoRoute(routeUtils.getListRoute(collectionName).name),\n    ) {\n      /* eslint no-alert: 0*/\n      const confirmed = window.confirm(\"Really destroy? This can't be undone\");\n      const handleCallback = (\n        (Alerts.handleCallback && Alerts.handleCallback.bind(Alerts)) ||\n        FallbackAlerts.handleCallback.bind(FallbackAlerts)\n      );\n      if (confirmed) {\n        methods[collectionName].destroy.call({ _id },\n          handleCallback('admin.destroy', { props: () => ({ collectionName, _id }) }, (error) => {\n            if (!error) {\n              onSuccess({ collectionName, _id });\n            }\n          }),\n      );\n      }\n    },\n    exportCsv(\n      { adminContext: { methods }, Alerts = FallbackAlerts },\n      docs, { filename = 'export.csv', fieldsToExport = [], ...options } = {},\n    ) {\n      const isEmptyObject = (\n        field => _.isObject(field) && !_.isDate(field) && _.isEmpty(field)\n      );\n      const isFieldToExport = (\n        (val, key) => _.indexOf(fieldsToExport, key) >= 0\n      );\n      const removeEmptyObjects = doc => _.omitBy(doc, isEmptyObject);\n      const pickFieldsToExport = doc => fieldsToExport.length > 0 && _.pickBy(doc, isFieldToExport);\n      const transform = flow(\n        map(flat),\n        map(pickFieldsToExport),\n        map(removeEmptyObjects),\n      );\n      const data = transform(docs);\n      const keysSet = new Set();\n      data.forEach(entry => _.keys(entry).forEach(key => keysSet.add(key)));\n      const keys = [...keysSet.values()];\n\n      csv.exportAsCsv({ filename, data, keys, ...options });\n    },\n    importCsv(\n      { adminContext: { methods } },\n      { collectionName, file, onInsert = _.noop, onUpdate = _.noop, onComplete = _.noop },\n    ) {\n      let counter = -1;\n      const imported = new Set();\n      Papa.parse(file, {\n        header: true,\n        dynamicTyping: true,\n        complete({ data }) {\n          data.forEach((entryUncleaned) => {\n            counter += 1;\n            const index = counter; // need constant closure copy\n            const checkForComplete = () => {\n              imported.add(index);\n              if (imported.size === data.length) {\n                onComplete();\n              }\n            };\n            // console.log('uncleaned', entryUncleaned);\n            const entry = flat.unflatten(\n              _.omitBy(entryUncleaned, value => value === 'NULL'),\n            );\n            // console.log('cleaned', entry);\n            if (entry._id) {\n              methods[collectionName].update.call(entry, (error) => {\n                onUpdate(index, error, entry);\n                checkForComplete();\n              });\n            } else {\n              delete entry._id; // if falsy\n              methods[collectionName].create.call(entry, (error, _id) => {\n                onInsert(index, error, { _id, ...entry });\n                checkForComplete();\n              });\n            }\n          });\n        },\n      });\n    },\n  },\n};\n"]}