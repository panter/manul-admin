{"version":3,"sources":["../src/actions.js"],"names":["manulAdmin","gotoCreate","collectionName","gotoRoute","adminContext","getCreateRoute","name","gotoEdit","_id","getEditRoute","gotoList","getListRoute","listSortToggle","newSortProperty","LocalState","localStateSortProperties","sortProperties","get","oldProperty","s","id","newSortProps","sortAscending","set","listSetSort","listSetFilter","filter","listSetSearchTerm","searchTerm","pageProperties","currentPage","listSetPageProperties","listGotoPage","listGotoNextPage","listGotoPreviousPage","update","doc","methods","Alerts","onSuccess","handleCallback","bind","call","props","error","create","destroy","confirmed","window","confirm","exportCsvFromLocalDocs","docs","filename","fieldsToExport","onCompleted","options","data","keys","exportAsCsv","exportCsv","onProgress","methodProps","listCount","countError","totalCount","allDocs","pageSize","_onExportCompleted","_fetchChunk","list","listError","result","progress","length","importCsv","file","onInsert","onUpdate","onComplete","counter","imported","parse","header","dynamicTyping","complete","forEach","index","checkForComplete","add","size","entry","unflatten","entryUncleaned","value"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;AAEA;;;;AAEA;;AACA;;AAMA;;;;AACA;;;;AACA;;;;;;kBAEe;AACbA,cAAY;AACVC,cADU,4BACkCC,cADlC,EACkD;AAAA,UAA/BC,SAA+B,QAA/CC,YAA+C,CAA/BD,SAA+B;;AAC1DA,gBAAU,sBAAWE,cAAX,CAA0BH,cAA1B,EAA0CI,IAApD;AACD,KAHS;AAIVC,YAJU,2BAIgCL,cAJhC,EAIgDM,GAJhD,EAIqD;AAAA,UAApCL,SAAoC,SAApDC,YAAoD,CAApCD,SAAoC;;AAC7DA,gBAAU,sBAAWM,YAAX,CAAwBP,cAAxB,EAAwCI,IAAlD,EAAwD,EAAEE,QAAF,EAAxD;AACD,KANS;AAOVE,YAPU,2BAOgCR,cAPhC,EAOgD;AAAA,UAA/BC,SAA+B,SAA/CC,YAA+C,CAA/BD,SAA+B;;AACxDA,gBAAU,sBAAWQ,YAAX,CAAwBT,cAAxB,EAAwCI,IAAlD;AACD,KATS;;AAUV;AACAM,kBAXU,iCAWqBV,cAXrB,EAWqCW,eAXrC,EAWsD;AAAA,UAA/CC,UAA+C,SAA/CA,UAA+C;;AAC9D,UAAMC,2BAA2B,sCAAcb,cAAd,CAAjC;AACA,UAAMc,iBAAiBF,WAAWG,GAAX,CAAeF,wBAAf,KAA4C,EAAnE;AACA,UAAMG,cAAc,oBAAK;AAAA,eAAKC,EAAEC,EAAF,KAASP,gBAAgBO,EAA9B;AAAA,OAAL,EAClBJ,cADkB,CAApB;AAGA,UAAIK,eAAe,EAAnB;;AAEA,UAAI,CAACH,WAAL,EAAkB;AAChBG,uBAAe,4BAAMR,eAAN,IAAuBS,eAAe,IAAtC,IAAf;AACD,OAFD,MAEO;AACLD,uBAAe,uBAAUL,cAAV,EAA0BE,WAA1B,CAAf;AACA,YAAIA,YAAYI,aAAhB,EAA+B;AAC7BD,yBAAe,4BAAMR,eAAN,IAAuBS,eAAe,KAAtC,IAAf;AACD;AACF;AACDR,iBAAWS,GAAX,CAAeR,wBAAf,EAAyCM,YAAzC;AACD,KA5BS;AA6BVG,eA7BU,8BA6BkBtB,cA7BlB,EA6BkCc,cA7BlC,EA6BkD;AAAA,UAA9CF,UAA8C,SAA9CA,UAA8C;;AAC1DA,iBAAWS,GAAX,CAAe,sCAAcrB,cAAd,CAAf,EAA8Cc,cAA9C;AACD,KA/BS;AAgCVS,iBAhCU,gCAgCoBvB,cAhCpB,EAgCoCwB,MAhCpC,EAgC4C;AAAA,UAAtCZ,UAAsC,SAAtCA,UAAsC;;AACpDA,iBAAWS,GAAX,CAAe,wCAAgBrB,cAAhB,CAAf,EAAgDwB,MAAhD;AACD,KAlCS;AAmCVC,qBAnCU,oCAmCwBzB,cAnCxB,EAmCwC0B,UAnCxC,EAmCoD;AAAA,UAA1Cd,UAA0C,SAA1CA,UAA0C;;AAC5D;AACA,UAAMe,iBAAiBf,WAAWG,GAAX,CACrB,4CAAoBf,cAApB,CADqB,CAAvB;AAGAY,iBAAWS,GAAX,CAAe,4CAAoBrB,cAApB,CAAf,6BACK2B,cADL;AAEEC,qBAAa;AAFf;AAIAhB,iBAAWS,GAAX,CAAe,wCAAgBrB,cAAhB,CAAf,EAAgD0B,UAAhD;AACD,KA7CS;AA8CVG,yBA9CU,wCA8C4B7B,cA9C5B,EA8C4C2B,cA9C5C,EA8C4D;AAAA,UAA9Cf,UAA8C,SAA9CA,UAA8C;;AACpEA,iBAAWS,GAAX,CAAe,4CAAoBrB,cAApB,CAAf,EAAoD2B,cAApD;AACD,KAhDS;AAiDVG,gBAjDU,+BAiDmB9B,cAjDnB,EAiDmC4B,WAjDnC,EAiDgD;AAAA,UAA3ChB,UAA2C,SAA3CA,UAA2C;;AACxD,UAAMe,iBAAiBf,WAAWG,GAAX,CACrB,4CAAoBf,cAApB,CADqB,CAAvB;AAGAY,iBAAWS,GAAX,CAAe,4CAAoBrB,cAApB,CAAf,6BACK2B,cADL;AAEEC;AAFF;AAID,KAzDS;AA0DVG,oBA1DU,oCA0DuB/B,cA1DvB,EA0DuC;AAAA,UAA9BY,UAA8B,UAA9BA,UAA8B;;AAC/C,UAAMe,iBAAiBf,WAAWG,GAAX,CACrB,4CAAoBf,cAApB,CADqB,CAAvB;AAGAY,iBAAWS,GAAX,CAAe,4CAAoBrB,cAApB,CAAf,6BACK2B,cADL;AAEEC,qBAAaD,eAAeC,WAAf,GAA6B;AAF5C;AAID,KAlES;AAmEVI,wBAnEU,wCAmE2BhC,cAnE3B,EAmE2C;AAAA,UAA9BY,UAA8B,UAA9BA,UAA8B;;AACnD,UAAMe,iBAAiBf,WAAWG,GAAX,CACrB,4CAAoBf,cAApB,CADqB,CAAvB;AAGAY,iBAAWS,GAAX,CAAe,4CAAoBrB,cAApB,CAAf,6BACK2B,cADL;AAEEC,qBAAaD,eAAeC,WAAf,GAA6B;AAF5C;AAID,KA3ES;AA4EVK,UA5EU,0BA8ERjC,cA9EQ,EA+ERkC,GA/EQ,EAiFR;AAAA,uCAJEhC,YAIF;AAAA,UAJkBiC,OAIlB,uBAJkBA,OAIlB;AAAA,UAJ2BlC,SAI3B,uBAJ2BA,SAI3B;AAAA,iCAJwCmC,MAIxC;AAAA,UAJwCA,MAIxC;AAAA,UADAC,SACA,uEADY;AAAA,eAAMpC,UAAU,sBAAWQ,YAAX,CAAwBT,cAAxB,EAAwCI,IAAlD,CAAN;AAAA,OACZ;;AACA,UAAMkC,iBACHF,OAAOE,cAAP,IAAyBF,OAAOE,cAAP,CAAsBC,IAAtB,CAA2BH,MAA3B,CAA1B,IACA,0BAAeE,cAAf,CAA8BC,IAA9B,2BAFF;AAGAJ,cAAQnC,cAAR,EAAwBiC,MAAxB,CAA+BO,IAA/B,CACEN,GADF,EAEEI,eACE,cADF,EAEE,EAAEG,OAAO;AAAA,iBAAO,EAAEzC,8BAAF,EAAkBkC,QAAlB,EAAP;AAAA,SAAT,EAFF,EAGE,iBAAS;AACP,YAAI,CAACQ,KAAL,EAAY;AACVL,oBAAU,EAAErC,8BAAF,EAAkBkC,QAAlB,EAAuB5B,KAAK4B,IAAI5B,GAAhC,EAAV;AACD;AACF,OAPH,CAFF;AAYD,KAjGS;AAkGVqC,UAlGU,0BAoGR3C,cApGQ,EAqGRkC,GArGQ,EAwGR;AAAA,uCALEhC,YAKF;AAAA,UALkBiC,OAKlB,uBALkBA,OAKlB;AAAA,UAL2BlC,SAK3B,uBAL2BA,SAK3B;AAAA,iCALwCmC,MAKxC;AAAA,UALwCA,MAKxC;AAAA,UAFAC,SAEA,uEAFY;AAAA,YAAG/B,GAAH,UAAGA,GAAH;AAAA,eACVL,UAAU,sBAAWM,YAAX,CAAwBP,cAAxB,EAAwCI,IAAlD,EAAwD,EAAEE,QAAF,EAAxD,CADU;AAAA,OAEZ;;AACA,UAAMgC,iBACHF,OAAOE,cAAP,IAAyBF,OAAOE,cAAP,CAAsBC,IAAtB,CAA2BH,MAA3B,CAA1B,IACA,0BAAeE,cAAf,CAA8BC,IAA9B,2BAFF;AAGAJ,cAAQnC,cAAR,EAAwB2C,MAAxB,CAA+BH,IAA/B,CACEN,GADF,EAEEI,eACE,cADF,EAEE,EAAEG,OAAO;AAAA,iBAAO,EAAEzC,8BAAF,EAAkBkC,QAAlB,EAAP;AAAA,SAAT,EAFF,EAGE,UAACQ,KAAD,EAAQpC,GAAR,EAAgB;AACd,YAAI,CAACoC,KAAL,EAAY;AACVL,oBAAU,EAAErC,8BAAF,EAAkBM,QAAlB,EAAV;AACD;AACF,OAPH,CAFF;AAYD,KAxHS;AAyHVsC,WAzHU,2BA2HR5C,cA3HQ,EA4HRM,GA5HQ,EA8HR;AAAA,uCAJEJ,YAIF;AAAA,UAJkBiC,OAIlB,uBAJkBA,OAIlB;AAAA,UAJ2BlC,SAI3B,uBAJ2BA,SAI3B;AAAA,iCAJwCmC,MAIxC;AAAA,UAJwCA,MAIxC;AAAA,UADAC,SACA,uEADY;AAAA,eAAMpC,UAAU,sBAAWQ,YAAX,CAAwBT,cAAxB,EAAwCI,IAAlD,CAAN;AAAA,OACZ;;AACA;AACA,UAAMyC,YAAYC,OAAOC,OAAP,CAAe,sCAAf,CAAlB;AACA,UAAMT,iBACHF,OAAOE,cAAP,IAAyBF,OAAOE,cAAP,CAAsBC,IAAtB,CAA2BH,MAA3B,CAA1B,IACA,0BAAeE,cAAf,CAA8BC,IAA9B,2BAFF;AAGA,UAAIM,SAAJ,EAAe;AACbV,gBAAQnC,cAAR,EAAwB4C,OAAxB,CAAgCJ,IAAhC,CACE,EAAElC,QAAF,EADF,EAEEgC,eACE,eADF,EAEE,EAAEG,OAAO;AAAA,mBAAO,EAAEzC,8BAAF,EAAkBM,QAAlB,EAAP;AAAA,WAAT,EAFF,EAGE,iBAAS;AACP,cAAI,CAACoC,KAAL,EAAY;AACVL,sBAAU,EAAErC,8BAAF,EAAkBM,QAAlB,EAAV;AACD;AACF,SAPH,CAFF;AAYD;AACF,KAlJS;AAmJV0C,0BAnJU,0CAqJRC,IArJQ,EA4JR;AAAA,UARkBd,OAQlB,UAREjC,YAQF,CARkBiC,OAQlB;AAAA,iCAR6BC,MAQ7B;AAAA,UAR6BA,MAQ7B;;AAAA,uFADI,EACJ;;AAAA,mCALEc,QAKF;AAAA,UALEA,QAKF,mCALa,YAKb;AAAA,yCAJEC,cAIF;AAAA,UAJEA,cAIF,yCAJmB,EAInB;AAAA,UAHEC,WAGF,UAHEA,WAGF;AAAA,UAFKC,OAEL;;AAAA,0BACuB,gCAAaJ,IAAb,EAAmB,EAAEE,8BAAF,EAAnB,CADvB;AAAA,UACQG,IADR,iBACQA,IADR;AAAA,UACcC,IADd,iBACcA,IADd;;AAEA,oBAAIC,WAAJ,0BAAkBN,kBAAlB,EAA4BI,UAA5B,EAAkCC,UAAlC,IAA2CF,OAA3C;AACA,UAAID,WAAJ,EAAiBA;AAClB,KAhKS;AAiKVK,aAjKU,qCA2KR;AAAA,UATkBtB,OASlB,UATEjC,YASF,CATkBiC,OASlB;AAAA,iCAT6BC,MAS7B;AAAA,UAT6BA,MAS7B;AAAA,UAREpC,cAQF,UAREA,cAQF;AAAA,UARkBwB,MAQlB,UARkBA,MAQlB;AAAA,UAR0BE,UAQ1B,UAR0BA,UAQ1B;AAAA,UARsCZ,cAQtC,UARsCA,cAQtC;;AAAA,uFADI,EACJ;;AAAA,mCANEoC,QAMF;AAAA,UANEA,QAMF,mCANa,YAMb;AAAA,yCALEC,cAKF;AAAA,UALEA,cAKF,yCALmB,EAKnB;AAAA,UAJEO,UAIF,UAJEA,UAIF;AAAA,UAHEN,WAGF,UAHEA,WAGF;AAAA,UAFKC,OAEL;;AACA,UAAMM,cAAc;AAClBnC,sBADkB;AAElBE,8BAFkB;AAGlBZ;AAHkB,OAApB;AAKAqB,cAAQnC,cAAR,EAAwB4D,SAAxB,CAAkCpB,IAAlC,CACEmB,WADF,EAEE,UAACE,UAAD,EAAaC,UAAb,EAA4B;AAC1B,YAAIC,UAAU,EAAd;AACA,YAAInC,cAAc,CAAlB;AACA,YAAMoC,WAAW,IAAjB;AACA,YAAMC,qBAAqB,SAArBA,kBAAqB,GAAM;AAAA,+BACR,gCAAaF,OAAb,EAAsB,EAAEZ,8BAAF,EAAtB,CADQ;AAAA,cACvBG,IADuB,kBACvBA,IADuB;AAAA,cACjBC,IADiB,kBACjBA,IADiB;;AAG/B,wBAAIC,WAAJ,0BAAkBN,kBAAlB,EAA4BI,UAA5B,EAAkCC,UAAlC,IAA2CF,OAA3C;AACA,cAAID,WAAJ,EAAiBA;AAClB,SALD;AAMA,YAAMc,cAAc,SAAdA,WAAc,GAAM;AACxB,cAAMvC,iBAAiB;AACrBC,oCADqB;AAErBoC;AAFqB,WAAvB;AAIA7B,kBAAQnC,cAAR,EAAwBmE,IAAxB,CAA6B3B,IAA7B,4BAEOmB,WAFP;AAGIhC;AAHJ,cAKE,UAACyC,SAAD,EAAYC,MAAZ,EAAuB;AACrBN,iEAAcA,OAAd,oCAA0BM,OAAOpB,IAAjC;AACA,gBAAMqB,WAAWP,QAAQQ,MAAR,GAAiBT,UAAlC;AACA,gBAAIJ,UAAJ,EAAgB;AACdA,yBAAWY,QAAX;AACD;AACD,gBAAID,OAAOpB,IAAP,CAAYsB,MAAZ,KAAuB,CAAvB,IAA4BR,QAAQQ,MAAR,IAAkBT,UAAlD,EAA8D;AAC5DG;AACD,aAFD,MAEO;AACLrC,6BAAe,CAAf;AACAsC;AACD;AACF,WAjBH;AAmBD,SAxBD;AAyBAA;AACD,OAtCH;AAwCD,KAzNS;AA0NVM,aA1NU,qCAmOR;AAAA,UARkBrC,OAQlB,UAREjC,YAQF,CARkBiC,OAQlB;AAAA,UANEnC,cAMF,UANEA,cAMF;AAAA,UALEyE,IAKF,UALEA,IAKF;AAAA,mCAJEC,QAIF;AAAA,UAJEA,QAIF;AAAA,mCAHEC,QAGF;AAAA,UAHEA,QAGF;AAAA,qCAFEC,UAEF;AAAA,UAFEA,UAEF;;AACA,UAAIC,UAAU,CAAC,CAAf;AACA,UAAMC,WAAW,mBAAjB;AACA,0BAAKC,KAAL,CAAWN,IAAX,EAAiB;AACfO,gBAAQ,IADO;AAEfC,uBAAe,IAFA;AAGfC,gBAHe,4BAGI;AAAA,cAAR5B,IAAQ,UAARA,IAAQ;;AACjBA,eAAK6B,OAAL,CAAa,0BAAkB;AAC7BN,uBAAW,CAAX;AACA,gBAAMO,QAAQP,OAAd,CAF6B,CAEN;AACvB,gBAAMQ,mBAAmB,SAAnBA,gBAAmB,GAAM;AAC7BP,uBAASQ,GAAT,CAAaF,KAAb;AACA,kBAAIN,SAASS,IAAT,KAAkBjC,KAAKiB,MAA3B,EAAmC;AACjCK;AACD;AACF,aALD;AAMA;AACA,gBAAMY,QAAQ,eAAKC,SAAL,CACZ,sBAASC,cAAT,EAAyB;AAAA,qBAASC,UAAU,MAAnB;AAAA,aAAzB,CADY,CAAd;AAGA;AACA,gBAAIH,MAAMlF,GAAV,EAAe;AACb6B,sBAAQnC,cAAR,EAAwBiC,MAAxB,CAA+BO,IAA/B,CAAoCgD,KAApC,EAA2C,iBAAS;AAClDb,yBAASS,KAAT,EAAgB1C,KAAhB,EAAuB8C,KAAvB;AACAH;AACD,eAHD;AAID,aALD,MAKO;AACL,qBAAOG,MAAMlF,GAAb,CADK,CACa;AAClB6B,sBAAQnC,cAAR,EAAwB2C,MAAxB,CAA+BH,IAA/B,CAAoCgD,KAApC,EAA2C,UAAC9C,KAAD,EAAQpC,GAAR,EAAgB;AACzDoE,yBAASU,KAAT,EAAgB1C,KAAhB,2BAAyBpC,QAAzB,IAAiCkF,KAAjC;AACAH;AACD,eAHD;AAID;AACF,WA1BD;AA2BD;AA/Bc,OAAjB;AAiCD;AAvQS;AADC,C","file":"actions.js","sourcesContent":["import { find } from 'lodash/fp';\nimport Papa from 'papaparse';\nimport _ from 'lodash';\nimport flat from 'flat';\n\nimport { getExportSet } from './utils/export_utils';\nimport {\n  stateListFilter,\n  stateListSort,\n  statePageProperties,\n  stateListSearch\n} from './utils/local_state_utils';\nimport FallbackAlerts from './fallback_alerts';\nimport csv from './utils/csv';\nimport routeUtils from './utils/route_utils';\n\nexport default {\n  manulAdmin: {\n    gotoCreate({ adminContext: { gotoRoute } }, collectionName) {\n      gotoRoute(routeUtils.getCreateRoute(collectionName).name);\n    },\n    gotoEdit({ adminContext: { gotoRoute } }, collectionName, _id) {\n      gotoRoute(routeUtils.getEditRoute(collectionName).name, { _id });\n    },\n    gotoList({ adminContext: { gotoRoute } }, collectionName) {\n      gotoRoute(routeUtils.getListRoute(collectionName).name);\n    },\n    // sortProperty is according to react-griddle\n    listSortToggle({ LocalState }, collectionName, newSortProperty) {\n      const localStateSortProperties = stateListSort(collectionName);\n      const sortProperties = LocalState.get(localStateSortProperties) || [];\n      const oldProperty = find(s => s.id === newSortProperty.id)(\n        sortProperties\n      );\n      let newSortProps = [];\n\n      if (!oldProperty) {\n        newSortProps = [{ ...newSortProperty, sortAscending: true }];\n      } else {\n        newSortProps = _.without(sortProperties, oldProperty);\n        if (oldProperty.sortAscending) {\n          newSortProps = [{ ...newSortProperty, sortAscending: false }];\n        }\n      }\n      LocalState.set(localStateSortProperties, newSortProps);\n    },\n    listSetSort({ LocalState }, collectionName, sortProperties) {\n      LocalState.set(stateListSort(collectionName), sortProperties);\n    },\n    listSetFilter({ LocalState }, collectionName, filter) {\n      LocalState.set(stateListFilter(collectionName), filter);\n    },\n    listSetSearchTerm({ LocalState }, collectionName, searchTerm) {\n      // reset pagination if changed\n      const pageProperties = LocalState.get(\n        statePageProperties(collectionName)\n      );\n      LocalState.set(statePageProperties(collectionName), {\n        ...pageProperties,\n        currentPage: 1\n      });\n      LocalState.set(stateListSearch(collectionName), searchTerm);\n    },\n    listSetPageProperties({ LocalState }, collectionName, pageProperties) {\n      LocalState.set(statePageProperties(collectionName), pageProperties);\n    },\n    listGotoPage({ LocalState }, collectionName, currentPage) {\n      const pageProperties = LocalState.get(\n        statePageProperties(collectionName)\n      );\n      LocalState.set(statePageProperties(collectionName), {\n        ...pageProperties,\n        currentPage\n      });\n    },\n    listGotoNextPage({ LocalState }, collectionName) {\n      const pageProperties = LocalState.get(\n        statePageProperties(collectionName)\n      );\n      LocalState.set(statePageProperties(collectionName), {\n        ...pageProperties,\n        currentPage: pageProperties.currentPage + 1\n      });\n    },\n    listGotoPreviousPage({ LocalState }, collectionName) {\n      const pageProperties = LocalState.get(\n        statePageProperties(collectionName)\n      );\n      LocalState.set(statePageProperties(collectionName), {\n        ...pageProperties,\n        currentPage: pageProperties.currentPage - 1\n      });\n    },\n    update(\n      { adminContext: { methods, gotoRoute }, Alerts = FallbackAlerts },\n      collectionName,\n      doc,\n      onSuccess = () => gotoRoute(routeUtils.getListRoute(collectionName).name)\n    ) {\n      const handleCallback =\n        (Alerts.handleCallback && Alerts.handleCallback.bind(Alerts)) ||\n        FallbackAlerts.handleCallback.bind(FallbackAlerts);\n      methods[collectionName].update.call(\n        doc,\n        handleCallback(\n          'admin.update',\n          { props: () => ({ collectionName, doc }) },\n          error => {\n            if (!error) {\n              onSuccess({ collectionName, doc, _id: doc._id });\n            }\n          }\n        )\n      );\n    },\n    create(\n      { adminContext: { methods, gotoRoute }, Alerts = FallbackAlerts },\n      collectionName,\n      doc,\n      onSuccess = ({ _id }) =>\n        gotoRoute(routeUtils.getEditRoute(collectionName).name, { _id })\n    ) {\n      const handleCallback =\n        (Alerts.handleCallback && Alerts.handleCallback.bind(Alerts)) ||\n        FallbackAlerts.handleCallback.bind(FallbackAlerts);\n      methods[collectionName].create.call(\n        doc,\n        handleCallback(\n          'admin.create',\n          { props: () => ({ collectionName, doc }) },\n          (error, _id) => {\n            if (!error) {\n              onSuccess({ collectionName, _id });\n            }\n          }\n        )\n      );\n    },\n    destroy(\n      { adminContext: { methods, gotoRoute }, Alerts = FallbackAlerts },\n      collectionName,\n      _id,\n      onSuccess = () => gotoRoute(routeUtils.getListRoute(collectionName).name)\n    ) {\n      /* eslint no-alert: 0*/\n      const confirmed = window.confirm(\"Really destroy? This can't be undone\");\n      const handleCallback =\n        (Alerts.handleCallback && Alerts.handleCallback.bind(Alerts)) ||\n        FallbackAlerts.handleCallback.bind(FallbackAlerts);\n      if (confirmed) {\n        methods[collectionName].destroy.call(\n          { _id },\n          handleCallback(\n            'admin.destroy',\n            { props: () => ({ collectionName, _id }) },\n            error => {\n              if (!error) {\n                onSuccess({ collectionName, _id });\n              }\n            }\n          )\n        );\n      }\n    },\n    exportCsvFromLocalDocs(\n      { adminContext: { methods }, Alerts = FallbackAlerts },\n      docs,\n      {\n        filename = 'export.csv',\n        fieldsToExport = [],\n        onCompleted,\n        ...options\n      } = {}\n    ) {\n      const { data, keys } = getExportSet(docs, { fieldsToExport });\n      csv.exportAsCsv({ filename, data, keys, ...options });\n      if (onCompleted) onCompleted();\n    },\n    exportCsv(\n      { adminContext: { methods }, Alerts = FallbackAlerts },\n      { collectionName, filter, searchTerm, sortProperties },\n      {\n        filename = 'export.csv',\n        fieldsToExport = [],\n        onProgress,\n        onCompleted,\n        ...options\n      } = {}\n    ) {\n      const methodProps = {\n        filter,\n        searchTerm,\n        sortProperties\n      };\n      methods[collectionName].listCount.call(\n        methodProps,\n        (countError, totalCount) => {\n          let allDocs = [];\n          let currentPage = 1;\n          const pageSize = 1000;\n          const _onExportCompleted = () => {\n            const { data, keys } = getExportSet(allDocs, { fieldsToExport });\n\n            csv.exportAsCsv({ filename, data, keys, ...options });\n            if (onCompleted) onCompleted();\n          };\n          const _fetchChunk = () => {\n            const pageProperties = {\n              currentPage,\n              pageSize\n            };\n            methods[collectionName].list.call(\n              {\n                ...methodProps,\n                pageProperties\n              },\n              (listError, result) => {\n                allDocs = [...allDocs, ...result.docs];\n                const progress = allDocs.length / totalCount;\n                if (onProgress) {\n                  onProgress(progress);\n                }\n                if (result.docs.length === 0 || allDocs.length >= totalCount) {\n                  _onExportCompleted();\n                } else {\n                  currentPage += 1;\n                  _fetchChunk();\n                }\n              }\n            );\n          };\n          _fetchChunk();\n        }\n      );\n    },\n    importCsv(\n      { adminContext: { methods } },\n      {\n        collectionName,\n        file,\n        onInsert = _.noop,\n        onUpdate = _.noop,\n        onComplete = _.noop\n      }\n    ) {\n      let counter = -1;\n      const imported = new Set();\n      Papa.parse(file, {\n        header: true,\n        dynamicTyping: true,\n        complete({ data }) {\n          data.forEach(entryUncleaned => {\n            counter += 1;\n            const index = counter; // need constant closure copy\n            const checkForComplete = () => {\n              imported.add(index);\n              if (imported.size === data.length) {\n                onComplete();\n              }\n            };\n            // console.log('uncleaned', entryUncleaned);\n            const entry = flat.unflatten(\n              _.omitBy(entryUncleaned, value => value === 'NULL')\n            );\n            // console.log('cleaned', entry);\n            if (entry._id) {\n              methods[collectionName].update.call(entry, error => {\n                onUpdate(index, error, entry);\n                checkForComplete();\n              });\n            } else {\n              delete entry._id; // if falsy\n              methods[collectionName].create.call(entry, (error, _id) => {\n                onInsert(index, error, { _id, ...entry });\n                checkForComplete();\n              });\n            }\n          });\n        }\n      });\n    }\n  }\n};\n"]}