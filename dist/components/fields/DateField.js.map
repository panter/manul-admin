{"version":3,"sources":["../../../src/components/fields/DateField.js"],"names":["dateFormat","value","toISOString","slice","dateParse","timestamp","onChange","date","Date","getFullYear","Date_","disabled","id","inputRef","label","max","min","name","placeholder","props","event","target","valueAsNumber","displayName"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,aAAa,SAAbA,UAAa;AAAA,SAASC,SAASA,MAAMC,WAAN,GAAoBC,KAApB,CAA0B,CAA1B,EAA6B,CAAC,CAA9B,CAAlB;AAAA,CAAnB;AACA,IAAMC,YAAY,SAAZA,SAAY,CAACC,SAAD,EAAYC,QAAZ,EAAyB;AACzC,MAAMC,OAAO,IAAIC,IAAJ,CAASH,SAAT,CAAb;AACA,MAAIE,KAAKE,WAAL,KAAqB,KAAzB,EAAgC;AAC9BH,aAASC,IAAT;AACD;AACF,CALD;;AAOA,IAAMG,QAAQ,SAARA,KAAQ;AAAA,MACVC,QADU,QACVA,QADU;AAAA,MAEVC,EAFU,QAEVA,EAFU;AAAA,MAGVC,QAHU,QAGVA,QAHU;AAAA,MAIVC,KAJU,QAIVA,KAJU;AAAA,MAKVC,GALU,QAKVA,GALU;AAAA,MAMVC,GANU,QAMVA,GANU;AAAA,MAOVC,IAPU,QAOVA,IAPU;AAAA,MAQVX,SARU,QAQVA,QARU;AAAA,MASVY,WATU,QASVA,WATU;AAAA,MAUVjB,KAVU,QAUVA,KAVU;AAAA,MAWPkB,KAXO;AAAA,SAaZ;AAAA;AAAS,kCAAeA,KAAf,CAAT;AACGL,aACD;AAAA;AAAA,QAAO,SAASF,EAAhB;AACGE;AADH,KAFF;AAOE;AACE,gBAAUH,QADZ;AAEE,UAAIC,EAFN;AAGE,WAAKZ,WAAWe,GAAX,CAHP;AAIE,WAAKf,WAAWgB,GAAX,CAJP;AAKE,YAAMC,IALR;AAME,gBAAU;AAAA,eAASb,UAAUgB,MAAMC,MAAN,CAAaC,aAAvB,EAAsChB,SAAtC,CAAT;AAAA,OANZ;AAOE,mBAAaY,WAPf;AAQE,WAAKL,QARP;AASE,YAAK,gBATP;AAUE,aAAOb,WAAWC,KAAX;AAVT;AAPF,GAbY;AAAA,CAAd;;AAmCAS,MAAMa,WAAN,GAAoB,MAApB;;kBAEe,4BAAab,KAAb,C","file":"DateField.js","sourcesContent":["import React from 'react';\nimport connectField from 'uniforms/connectField';\nimport filterDOMProps from 'uniforms/filterDOMProps';\n\nconst dateFormat = value => value && value.toISOString().slice(0, -8);\nconst dateParse = (timestamp, onChange) => {\n  const date = new Date(timestamp);\n  if (date.getFullYear() < 10000) {\n    onChange(date);\n  }\n};\n\nconst Date_ = ({\n    disabled,\n    id,\n    inputRef,\n    label,\n    max,\n    min,\n    name,\n    onChange,\n    placeholder,\n    value,\n    ...props\n}) =>\n  <div {...filterDOMProps(props)}>\n    {label && (\n    <label htmlFor={id}>\n      {label}\n    </label>\n        )}\n\n    <input\n      disabled={disabled}\n      id={id}\n      max={dateFormat(max)}\n      min={dateFormat(min)}\n      name={name}\n      onChange={event => dateParse(event.target.valueAsNumber, onChange)}\n      placeholder={placeholder}\n      ref={inputRef}\n      type=\"datetime-local\"\n      value={dateFormat(value)}\n    />\n  </div>\n;\n\nDate_.displayName = 'Date';\n\nexport default connectField(Date_);\n"]}