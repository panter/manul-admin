{"version":3,"sources":["../src/create_methods.js"],"names":["context","config","Meteor","ValidatedMethod","SimpleSchema","require","default","error","Error","extendSimpleSchema","schema","otherSchema","version","extend","isAllowed","createFor","collectionName","collections","collection","allowInsertWithId","update","name","validate","simpleSchema","_id","type","String","validator","clean","run","doc","isServer","userId","updated","$set","bypassCollection2","create","optional","insert","destroy","remove","methods","forEach"],"mappings":"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","file":"create_methods.js","sourcesContent":["\nimport IsAllowed from './is_allowed';\n\n\nexport default (context, config) => {\n  const { Meteor, ValidatedMethod } = context;\n  let SimpleSchema;\n  try {\n    /* eslint global-require: 0 */\n    SimpleSchema = require('simpl-schema').default;\n  } catch (error) {\n    // try to get from context\n    SimpleSchema = context.SimpleSchema;\n  }\n  if (!SimpleSchema) {\n    throw new Error('please provide SimpleSchema by npm or in context (version 1)');\n  }\n  const extendSimpleSchema = (schema, otherSchema) => {\n    if (SimpleSchema.version === 2) {\n      return schema.extend(otherSchema);\n    }\n    return new SimpleSchema([schema, otherSchema]);\n  };\n  const isAllowed = IsAllowed(config);\n  const createFor = (collectionName) => {\n    const { collection, allowInsertWithId } = config.collections[collectionName];\n    return {\n      update: new ValidatedMethod({\n        name: `manulAdmin.${collectionName}.update`,\n        validate: extendSimpleSchema(\n          collection.simpleSchema(), { _id: { type: String } },\n        )\n        .validator({ clean: true }),\n        run({ _id, ...doc }) {\n          // console.log('updating', collectionName, _id, doc);\n          if (Meteor.isServer) {\n            if (!isAllowed(collectionName, this.userId)) {\n              throw new Meteor.Error('not allowed', 'You are not allowed');\n            }\n\n            // Whole-doc update is not supported by simpl-schema,\n            // as workaround we use bypassCollection2: true\n            // https://github.com/aldeed/meteor-simple-schema/issues/175\n            const updated = collection.update(\n              _id, { $set: doc }, { bypassCollection2: true },\n            );\n            if (updated === 0) {\n              throw new Meteor.Error('not found', 'Entry not found');\n            }\n          }\n        },\n      }),\n      create: new ValidatedMethod({\n        name: `manulAdmin.${collectionName}.create`,\n        validate: (allowInsertWithId ?\n          extendSimpleSchema(collection.simpleSchema(), { _id: { type: String, optional: true } }) :\n          collection.simpleSchema()\n        ).validator({ clean: true }),\n        run(doc) {\n          // console.log('inserting', doc);\n          if (!isAllowed(collectionName, this.userId)) {\n            throw new Meteor.Error('not allowed', 'You are not allowed');\n          }\n          return collection.insert(doc);\n        },\n      }),\n      destroy: new ValidatedMethod({\n        name: `manulAdmin.${collectionName}.destroy`,\n        validate: new SimpleSchema(\n          { _id: { type: String } },\n        ).validator({ clean: true }),\n        run({ _id }) {\n          // console.log('inserting', doc);\n          if (!isAllowed(collectionName, this.userId)) {\n            throw new Meteor.Error('not allowed', 'You are not allowed');\n          }\n          return collection.remove(_id);\n        },\n      }),\n\n    };\n  };\n\n  const methods = {\n  };\n  Object.keys(config.collections).forEach((collectionName) => {\n    methods[collectionName] = createFor(collectionName);\n  });\n  return methods;\n};\n"]}