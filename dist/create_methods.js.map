{"version":3,"sources":["../src/create_methods.js"],"names":["DEBUG","logObject","replacer","key","value","RegExp","toString","console","log","obj","context","config","Meteor","ValidatedMethod","SimpleSchema","require","default","error","Error","ListSchema","filter","type","Object","optional","blackbox","searchTerm","String","sortProperties","Array","pageProperties","extendSimpleSchema","schema","otherSchema","version","extend","isAllowed","createFor","collections","collectionName","collection","allowInsertWithId","searchFields","transformFilter","textIndex","hasTextIndex","isServer","Boolean","getListQueryAndOptions","query","queryOptions","update","name","validate","simpleSchema","_id","validator","clean","run","doc","userId","updated","$set","bypassCollection2","create","insert","destroy","remove","list","options","unblock","docs","find","fetch","count","listCount","methods","forEach"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;AAEA,IAAMA,QAAQ,KAAd;;AAEA,IAAMC,YAAY,SAAZA,SAAY,MAAO;AACvB,WAASC,QAAT,CAAkBC,GAAlB,EAAuBC,KAAvB,EAA8B;AAC5B,QAAIA,iBAAiBC,MAArB,EAA6B,qBAAmBD,MAAME,QAAN,EAAnB;AAC7B,WAAOF,KAAP;AACD;;AAEDG,UAAQC,GAAR,CAAY,yBAAeC,GAAf,EAAoBP,QAApB,EAA8B,CAA9B,CAAZ;AACD,CAPD;;kBASe,UAACQ,OAAD,EAAUC,MAAV,EAAqB;AAAA,MAC1BC,MAD0B,GACEF,OADF,CAC1BE,MAD0B;AAAA,MAClBC,eADkB,GACEH,OADF,CAClBG,eADkB;;AAElC,MAAIC,qBAAJ;AACA,MAAI;AACF;AACAA,mBAAeC,QAAQ,cAAR,EAAwBC,OAAvC;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd;AACAH,mBAAeJ,QAAQI,YAAvB;AACD;AACD,MAAI,CAACA,YAAL,EAAmB;AACjB,UAAM,IAAII,KAAJ,CACJ,8DADI,CAAN;AAGD;AACD,MAAMC,aAAa,IAAIL,YAAJ,CAAiB;AAClCM,YAAQ;AACNC,YAAMC,MADA;AAENC,gBAAU,IAFJ;AAGNC,gBAAU;AAHJ,KAD0B;AAMlCC,gBAAY;AACVJ,YAAMK,MADI;AAEVH,gBAAU;AAFA,KANsB;AAUlCI,oBAAgB;AACdN,YAAMO,KADQ;AAEdL,gBAAU;AAFI,KAVkB;AAclC,wBAAoB;AAClBF,YAAMC,MADY;AAElBC,gBAAU,IAFQ;AAGlBC,gBAAU;AAHQ,KAdc;AAmBlCK,oBAAgB;AACdR,YAAMC,MADQ;AAEdC,gBAAU,IAFI;AAGdC,gBAAU;AAHI;AAnBkB,GAAjB,CAAnB;AAyBA,MAAMM,qBAAqB,SAArBA,kBAAqB,CAACC,MAAD,EAASC,WAAT,EAAyB;AAClD,QAAIlB,aAAamB,OAAb,KAAyB,CAA7B,EAAgC;AAC9B,aAAOF,OAAOG,MAAP,CAAcF,WAAd,CAAP;AACD;AACD,WAAO,IAAIlB,YAAJ,CAAiB,CAACiB,MAAD,EAASC,WAAT,CAAjB,CAAP;AACD,GALD;AAMA,MAAMG,YAAY,0BAAUxB,MAAV,CAAlB;;AAEA,MAAMyB,YAAY,SAAZA,SAAY,iBAAkB;AAAA,gCAO9BzB,OAAO0B,WAAP,CAAmBC,cAAnB,CAP8B;AAAA,QAEhCC,UAFgC,yBAEhCA,UAFgC;AAAA,QAGhCC,iBAHgC,yBAGhCA,iBAHgC;AAAA,QAIhCC,YAJgC,yBAIhCA,YAJgC;AAAA,QAKhCC,eALgC,yBAKhCA,eALgC;AAAA,QAMhCC,SANgC,yBAMhCA,SANgC;;AAQlC,QAAMC,eAAehC,OAAOiC,QAAP,IAAmBC,QAAQH,SAAR,CAAxC;;AAEA,QAAMI,yBAAyB,SAAzBA,sBAAyB,OAKzB;AAAA,UAJJ3B,MAII,QAJJA,MAII;AAAA,iCAHJK,UAGI;AAAA,UAHJA,UAGI,mCAHS,IAGT;AAAA,UAFJE,cAEI,QAFJA,cAEI;AAAA,UADJE,cACI,QADJA,cACI;;AACJ,UAAMmB,QAAQ,gCACZ5B,MADY,EAEZK,cAAc,EAAEgB,0BAAF,EAAgBhB,sBAAhB,EAFF,EAGZiB,eAHY,EAIZE,YAJY,CAAd;;AAOA,UAAMK,eAAe,4CAA0B;AAC7CtB,sCAD6C;AAE7CE;AAF6C,OAA1B,CAArB;AAIA,UAAI7B,KAAJ,EAAWC,UAAU,EAAEwB,sBAAF,EAAcuB,YAAd,EAAqBC,0BAArB,EAAV;;AAEX,aAAO;AACLD,oBADK;AAELC;AAFK,OAAP;AAID,KAvBD;;AAyBA,WAAO;AACLC,cAAQ,IAAIrC,eAAJ,CAAoB;AAC1BsC,8BAAoBb,cAApB,YAD0B;AAE1Bc,kBAAUtB,mBAAmBS,WAAWc,YAAX,EAAnB,EAA8C;AACtDC,eAAK,EAAEjC,MAAMK,MAAR;AADiD,SAA9C,EAEP6B,SAFO,CAEG,EAAEC,OAAO,IAAT,EAFH,CAFgB;AAK1BC,WAL0B,sBAKL;AAAA,cAAfH,GAAe,SAAfA,GAAe;AAAA,cAAPI,GAAO;;AACnB;AACA,cAAI9C,OAAOiC,QAAX,EAAqB;AACnB,gBAAI,CAACV,UAAUG,cAAV,EAA0B,KAAKqB,MAA/B,CAAL,EAA6C;AAC3C,oBAAM,IAAI/C,OAAOM,KAAX,CAAiB,aAAjB,EAAgC,qBAAhC,CAAN;AACD;;AAED;AACA;AACA;AACA,gBAAM0C,UAAUrB,WAAWW,MAAX,CACdI,GADc,EAEd,EAAEO,MAAMH,GAAR,EAFc,EAGd,EAAEI,mBAAmB,IAArB,EAHc,CAAhB;AAKA,gBAAIF,YAAY,CAAhB,EAAmB;AACjB,oBAAM,IAAIhD,OAAOM,KAAX,CAAiB,WAAjB,EAA8B,iBAA9B,CAAN;AACD;AACF;AACF;AAxByB,OAApB,CADH;AA2BL6C,cAAQ,IAAIlD,eAAJ,CAAoB;AAC1BsC,8BAAoBb,cAApB,YAD0B;AAE1Bc,kBAAU,CAACZ,oBACPV,mBAAmBS,WAAWc,YAAX,EAAnB,EAA8C;AAC5CC,eAAK,EAAEjC,MAAMK,MAAR,EAAgBH,UAAU,IAA1B;AADuC,SAA9C,CADO,GAIPgB,WAAWc,YAAX,EAJM,EAKRE,SALQ,CAKE,EAAEC,OAAO,IAAT,EALF,CAFgB;AAQ1BC,WAR0B,eAQtBC,GARsB,EAQjB;AACP;AACA,cAAI,CAACvB,UAAUG,cAAV,EAA0B,KAAKqB,MAA/B,CAAL,EAA6C;AAC3C,kBAAM,IAAI/C,OAAOM,KAAX,CAAiB,aAAjB,EAAgC,qBAAhC,CAAN;AACD;AACD,iBAAOqB,WAAWyB,MAAX,CAAkBN,GAAlB,CAAP;AACD;AAdyB,OAApB,CA3BH;AA2CLO,eAAS,IAAIpD,eAAJ,CAAoB;AAC3BsC,8BAAoBb,cAApB,aAD2B;AAE3Bc,kBAAU,IAAItC,YAAJ,CAAiB,EAAEwC,KAAK,EAAEjC,MAAMK,MAAR,EAAP,EAAjB,EAA4C6B,SAA5C,CAAsD;AAC9DC,iBAAO;AADuD,SAAtD,CAFiB;AAK3BC,WAL2B,sBAKd;AAAA,cAAPH,GAAO,SAAPA,GAAO;;AACX;AACA,cAAI,CAACnB,UAAUG,cAAV,EAA0B,KAAKqB,MAA/B,CAAL,EAA6C;AAC3C,kBAAM,IAAI/C,OAAOM,KAAX,CAAiB,aAAjB,EAAgC,qBAAhC,CAAN;AACD;AACD,iBAAOqB,WAAW2B,MAAX,CAAkBZ,GAAlB,CAAP;AACD;AAX0B,OAApB,CA3CJ;AAwDLa,YAAM,IAAItD,eAAJ,CAAoB;AACxBsC,8BAAoBb,cAApB,UADwB;AAExBc,kBAAUjC,WAAWoC,SAAX,CAAqB,EAAEC,OAAO,KAAT,EAArB,CAFc;AAGxBC,WAHwB,eAGpBW,OAHoB,EAGX;AACX,cAAI,CAACjC,UAAUG,cAAV,EAA0B,KAAKqB,MAA/B,CAAL,EAA6C;AAC3C,kBAAM,IAAI/C,OAAOM,KAAX,CAAiB,aAAjB,EAAgC,qBAAhC,CAAN;AACD;AACD,eAAKmD,OAAL;;AAJW,sCAKqBtB,uBAAuBqB,OAAvB,CALrB;AAAA,cAKHpB,KALG,yBAKHA,KALG;AAAA,cAKIC,YALJ,yBAKIA,YALJ;;AAOX,iBAAO;AACLqB,kBAAM/B,WAAWgC,IAAX,CAAgBvB,KAAhB,EAAuBC,YAAvB,EAAqCuB,KAArC,EADD;AAELC,mBAAOlC,WAAWgC,IAAX,CAAgBvB,KAAhB,EAAuByB,KAAvB;AAFF,WAAP;AAID;AAduB,OAApB,CAxDD;AAwELC,iBAAW,IAAI7D,eAAJ,CAAoB;AAC7BsC,8BAAoBb,cAApB,eAD6B;AAE7Bc,kBAAUjC,WAAWoC,SAAX,CAAqB,EAAEC,OAAO,KAAT,EAArB,CAFmB;AAG7BC,WAH6B,eAGzBW,OAHyB,EAGhB;AACX,cAAI,CAACjC,UAAUG,cAAV,EAA0B,KAAKqB,MAA/B,CAAL,EAA6C;AAC3C,kBAAM,IAAI/C,OAAOM,KAAX,CAAiB,aAAjB,EAAgC,qBAAhC,CAAN;AACD;AACD,eAAKmD,OAAL;;AAJW,uCAKOtB,uBAAuBqB,OAAvB,CALP;AAAA,cAKHpB,KALG,0BAKHA,KALG;;AAMX,iBAAOT,WAAWgC,IAAX,CAAgBvB,KAAhB,EAAuByB,KAAvB,EAAP;AACD;AAV4B,OAApB;AAxEN,KAAP;AAqFD,GAxHD;;AA0HA,MAAME,UAAU,EAAhB;AACA,sBAAYhE,OAAO0B,WAAnB,EAAgCuC,OAAhC,CAAwC,0BAAkB;AACxDD,YAAQrC,cAAR,IAA0BF,UAAUE,cAAV,CAA1B;AACD,GAFD;AAGA,SAAOqC,OAAP;AACD,C","file":"create_methods.js","sourcesContent":["import { filterToQuery, gridOptionsToQueryOptions } from \"./utils/query_utils\";\nimport IsAllowed from \"./is_allowed\";\n\nconst DEBUG = false;\n\nconst logObject = obj => {\n  function replacer(key, value) {\n    if (value instanceof RegExp) return `__REGEXP ${value.toString()}`;\n    return value;\n  }\n\n  console.log(JSON.stringify(obj, replacer, 2));\n};\n\nexport default (context, config) => {\n  const { Meteor, ValidatedMethod } = context;\n  let SimpleSchema;\n  try {\n    /* eslint global-require: 0 */\n    SimpleSchema = require(\"simpl-schema\").default;\n  } catch (error) {\n    // try to get from context\n    SimpleSchema = context.SimpleSchema;\n  }\n  if (!SimpleSchema) {\n    throw new Error(\n      \"please provide SimpleSchema by npm or in context (version 1)\"\n    );\n  }\n  const ListSchema = new SimpleSchema({\n    filter: {\n      type: Object,\n      optional: true,\n      blackbox: true\n    },\n    searchTerm: {\n      type: String,\n      optional: true\n    },\n    sortProperties: {\n      type: Array,\n      optional: true\n    },\n    \"sortProperties.$\": {\n      type: Object,\n      optional: true,\n      blackbox: true\n    },\n    pageProperties: {\n      type: Object,\n      optional: true,\n      blackbox: true\n    }\n  });\n  const extendSimpleSchema = (schema, otherSchema) => {\n    if (SimpleSchema.version === 2) {\n      return schema.extend(otherSchema);\n    }\n    return new SimpleSchema([schema, otherSchema]);\n  };\n  const isAllowed = IsAllowed(config);\n\n  const createFor = collectionName => {\n    const {\n      collection,\n      allowInsertWithId,\n      searchFields,\n      transformFilter,\n      textIndex\n    } = config.collections[collectionName];\n    const hasTextIndex = Meteor.isServer && Boolean(textIndex);\n\n    const getListQueryAndOptions = ({\n      filter,\n      searchTerm = null,\n      sortProperties,\n      pageProperties\n    }) => {\n      const query = filterToQuery(\n        filter,\n        searchTerm && { searchFields, searchTerm },\n        transformFilter,\n        hasTextIndex\n      );\n\n      const queryOptions = gridOptionsToQueryOptions({\n        sortProperties,\n        pageProperties\n      });\n      if (DEBUG) logObject({ searchTerm, query, queryOptions });\n\n      return {\n        query,\n        queryOptions\n      };\n    };\n\n    return {\n      update: new ValidatedMethod({\n        name: `manulAdmin.${collectionName}.update`,\n        validate: extendSimpleSchema(collection.simpleSchema(), {\n          _id: { type: String }\n        }).validator({ clean: true }),\n        run({ _id, ...doc }) {\n          // console.log('updating', collectionName, _id, doc);\n          if (Meteor.isServer) {\n            if (!isAllowed(collectionName, this.userId)) {\n              throw new Meteor.Error(\"not allowed\", \"You are not allowed\");\n            }\n\n            // Whole-doc update is not supported by simpl-schema,\n            // as workaround we use bypassCollection2: true\n            // https://github.com/aldeed/meteor-simple-schema/issues/175\n            const updated = collection.update(\n              _id,\n              { $set: doc },\n              { bypassCollection2: true }\n            );\n            if (updated === 0) {\n              throw new Meteor.Error(\"not found\", \"Entry not found\");\n            }\n          }\n        }\n      }),\n      create: new ValidatedMethod({\n        name: `manulAdmin.${collectionName}.create`,\n        validate: (allowInsertWithId\n          ? extendSimpleSchema(collection.simpleSchema(), {\n              _id: { type: String, optional: true }\n            })\n          : collection.simpleSchema()\n        ).validator({ clean: true }),\n        run(doc) {\n          // console.log('inserting', doc);\n          if (!isAllowed(collectionName, this.userId)) {\n            throw new Meteor.Error(\"not allowed\", \"You are not allowed\");\n          }\n          return collection.insert(doc);\n        }\n      }),\n      destroy: new ValidatedMethod({\n        name: `manulAdmin.${collectionName}.destroy`,\n        validate: new SimpleSchema({ _id: { type: String } }).validator({\n          clean: true\n        }),\n        run({ _id }) {\n          // console.log('inserting', doc);\n          if (!isAllowed(collectionName, this.userId)) {\n            throw new Meteor.Error(\"not allowed\", \"You are not allowed\");\n          }\n          return collection.remove(_id);\n        }\n      }),\n      list: new ValidatedMethod({\n        name: `manulAdmin.${collectionName}.list`,\n        validate: ListSchema.validator({ clean: false }),\n        run(options) {\n          if (!isAllowed(collectionName, this.userId)) {\n            throw new Meteor.Error(\"not allowed\", \"You are not allowed\");\n          }\n          this.unblock();\n          const { query, queryOptions } = getListQueryAndOptions(options);\n\n          return {\n            docs: collection.find(query, queryOptions).fetch(),\n            count: collection.find(query).count()\n          };\n        }\n      }),\n      listCount: new ValidatedMethod({\n        name: `manulAdmin.${collectionName}.listCount`,\n        validate: ListSchema.validator({ clean: false }),\n        run(options) {\n          if (!isAllowed(collectionName, this.userId)) {\n            throw new Meteor.Error(\"not allowed\", \"You are not allowed\");\n          }\n          this.unblock();\n          const { query } = getListQueryAndOptions(options);\n          return collection.find(query).count();\n        }\n      })\n    };\n  };\n\n  const methods = {};\n  Object.keys(config.collections).forEach(collectionName => {\n    methods[collectionName] = createFor(collectionName);\n  });\n  return methods;\n};\n"]}