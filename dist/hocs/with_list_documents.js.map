{"version":3,"sources":["../../src/hocs/with_list_documents.js"],"names":["DEBUG","withMethodCall","options","state","callId","undefined","isLoading","docs","recordCount","loadDataDebounced","loadData","props","context","collectionName","filter","searchTerm","sortProperties","pageProperties","methods","adminContext","methodArgs","listType","console","log","Math","random","setState","list","call","error","result","count","nextProps","Component","composer","onData","filterBase","LocalState","config","collectionConfig","collections","listFilterSchema","defaultFilters","filterLocalConfigured","get","filterLocal","clean","exportCurrentSearchAsCsv","exportCsv","exportArgs"],"mappings":"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","file":"with_list_documents.js","sourcesContent":["import { composeAll } from '@storybook/react-komposer';\nimport { isEqual, debounce } from 'lodash';\nimport { withHandlers } from 'recompose';\nimport React from 'react';\n\nimport {\n  stateListFilter,\n  stateListSort,\n  statePageProperties,\n  stateListSearch\n} from '../utils/local_state_utils';\nimport composeWithTracker from '../utils/composeWithTracker';\n\nconst DEBUG = false;\n/* eslint react/display-name: 0*/\nconst withMethodCall = (options = {}) => C =>\n  class extends React.Component {\n    state = {\n      callId: undefined,\n      isLoading: true,\n      docs: [],\n      recordCount: 0\n    };\n    componentDidMount() {\n      this.loadDataDebounced();\n    }\n    loadDataDebounced = debounce(this.loadData, 300);\n    loadData() {\n      const {\n        context,\n        collectionName,\n        filter,\n        searchTerm,\n        sortProperties,\n        pageProperties\n      } = this.props;\n      const {\n        adminContext: { methods }\n      } = context();\n      const methodArgs = {\n        filter,\n        searchTerm,\n        sortProperties,\n        pageProperties,\n        listType: 'ui'\n      };\n      if (DEBUG) console.log('calling method', methodArgs);\n      const callId = Math.random();\n      this.setState({\n        isLoading: true,\n        callId\n      });\n      methods[collectionName].list.call(methodArgs, (error, result) => {\n        if (error) {\n          console.error(error);\n        } else {\n          if (DEBUG) console.log('got result', error, result);\n          if (this.state.callId === callId) {\n            this.setState({\n              isLoading: false,\n              docs: result.docs,\n              recordCount: result.count\n            });\n          } else if (DEBUG)\n            console.log('ignore', searchTerm, callId, this.state.callId);\n        }\n      });\n    }\n    componentWillUpdate(nextProps) {\n      if (!isEqual(nextProps, this.props)) {\n        this.loadDataDebounced();\n      }\n    }\n    render() {\n      return (\n        <C\n          {...this.props}\n          {...this.state}\n          refresh={() => {\n            this.loadData();\n          }}\n        />\n      );\n    }\n  };\n\nexport const composer = () => (\n  { context, collectionName, filter: filterBase },\n  onData\n) => {\n  const {\n    adminContext: { LocalState, config }\n  } = context();\n  const collectionConfig = config.collections[collectionName];\n\n  const { listFilterSchema, defaultFilters } = collectionConfig;\n\n  const filterLocalConfigured =\n    LocalState.get(stateListFilter(collectionName)) || {};\n\n  const filterLocal = {\n    ...defaultFilters,\n    ...(listFilterSchema\n      ? listFilterSchema.clean(filterLocalConfigured)\n      : filterLocalConfigured)\n  };\n\n  const filter = {\n    ...filterLocal,\n    ...filterBase\n  };\n  if (DEBUG) console.log('full filter', filter);\n  const sortProperties = LocalState.get(stateListSort(collectionName));\n  const searchTerm = LocalState.get(stateListSearch(collectionName));\n  const pageProperties = LocalState.get(statePageProperties(collectionName));\n\n  onData(null, {\n    filter,\n    searchTerm,\n    sortProperties,\n    pageProperties\n  });\n};\n\nexport default options =>\n  composeAll(\n    withHandlers({\n      exportCurrentSearchAsCsv: ({\n        exportCsv,\n        collectionName,\n        filter,\n        searchTerm,\n        sortProperties\n      }) => (...exportArgs) => {\n        exportCsv(\n          { collectionName, filter, searchTerm, sortProperties },\n          ...exportArgs\n        );\n      }\n    }),\n    withMethodCall(options),\n    composeWithTracker(composer(options))\n  );\n"]}