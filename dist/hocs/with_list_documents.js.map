{"version":3,"sources":["../../src/hocs/with_list_documents.js"],"names":["DEBUG","withMethodCall","state","callId","undefined","isLoading","docs","recordCount","loadDataDebounced","loadData","props","context","collectionName","filter","searchTerm","sortProperties","pageProperties","methods","adminContext","console","log","Math","random","setState","list","call","error","result","count","nextProps","Component","composer","onData","filterBase","LocalState","filterLocal","get","exportCurrentSearchAsCsv","exportCsv","exportArgs"],"mappings":"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","file":"with_list_documents.js","sourcesContent":["import { composeAll } from '@storybook/react-komposer';\nimport { isEqual, debounce } from 'lodash';\nimport { withHandlers } from 'recompose';\nimport React from 'react';\n\nimport {\n  stateListFilter,\n  stateListSort,\n  statePageProperties,\n  stateListSearch\n} from '../utils/local_state_utils';\nimport composeWithTracker from '../utils/composeWithTracker';\n\nconst DEBUG = false;\n/* eslint react/display-name: 0*/\nconst withMethodCall = C =>\n  class extends React.Component {\n    state = {\n      callId: undefined,\n      isLoading: true,\n      docs: [],\n      recordCount: 0\n    };\n    componentDidMount() {\n      this.loadDataDebounced();\n    }\n    loadDataDebounced = debounce(this.loadData, 300);\n    loadData() {\n      const {\n        context,\n        collectionName,\n        filter,\n        searchTerm,\n        sortProperties,\n        pageProperties\n      } = this.props;\n      const { adminContext: { methods } } = context();\n      if (DEBUG)\n        console.log('calling method', {\n          filter,\n          searchTerm,\n          sortProperties,\n          pageProperties\n        });\n      const callId = Math.random();\n      this.setState({\n        isLoading: true,\n        callId\n      });\n      methods[collectionName].list.call(\n        {\n          filter,\n          searchTerm,\n          sortProperties,\n          pageProperties\n        },\n        (error, result) => {\n          if (error) {\n            console.error(error);\n          } else {\n            if (DEBUG) console.log('got result', error, result);\n            if (this.state.callId === callId) {\n              this.setState({\n                isLoading: false,\n                docs: result.docs,\n                recordCount: result.count\n              });\n            } else if (DEBUG)\n              console.log('ignore', searchTerm, callId, this.state.callId);\n          }\n        }\n      );\n    }\n    componentWillUpdate(nextProps) {\n      if (!isEqual(nextProps, this.props)) {\n        this.loadDataDebounced();\n      }\n    }\n    render() {\n      return <C {...this.props} {...this.state} />;\n    }\n  };\n\nexport const composer = () => (\n  { context, collectionName, filter: filterBase },\n  onData\n) => {\n  const { adminContext: { LocalState } } = context();\n  const filterLocal = LocalState.get(stateListFilter(collectionName));\n  const filter = {\n    ...filterLocal,\n    ...filterBase\n  };\n  const sortProperties = LocalState.get(stateListSort(collectionName));\n  const searchTerm = LocalState.get(stateListSearch(collectionName));\n  const pageProperties = LocalState.get(statePageProperties(collectionName));\n\n  onData(null, {\n    filter,\n    searchTerm,\n    sortProperties,\n    pageProperties\n  });\n};\n\nexport default () =>\n  composeAll(\n    withHandlers({\n      exportCurrentSearchAsCsv: ({\n        exportCsv,\n        collectionName,\n        filter,\n        searchTerm,\n        sortProperties\n      }) => (...exportArgs) => {\n        exportCsv(\n          { collectionName, filter, searchTerm, sortProperties },\n          ...exportArgs\n        );\n      }\n    }),\n    withMethodCall,\n    composeWithTracker(composer())\n  );\n"]}