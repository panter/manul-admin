{"version":3,"sources":["../../../src/initMethods/getListResult/index.js"],"names":["DEBUG","DEFAULT_AGGREGATE_OPTIONS","cursor","readPreference","logObject","replacer","key","value","RegExp","toString","console","log","obj","COUNT_PRESERVING_STAGES","addCount","lastCountChangingStage","stages","stage","find","includes","slice","$count","removeArrayIndex","columnId","replace","cleanArrayIndexInSort","sort","extractColumnsToUse","columns","type","map","column","include","id","filter","c","getPipeline","context","collectionConfig","listOptions","countOnly","Meteor","searchTerm","sortProperties","pageProperties","searchFields","filterToBaseQuery","textIndex","aggregation","useTextIndex","isServer","Boolean","baseQuery","queryOptions","aggregationOptions","basePipeline","$match","stagesPreSort","sortPipeline","$sort","limit","$limit","skip","$skip","filterColumnsStage","$project","listType","postSort","getDocumentsAsArray","pipeline","collection","docsCursor","explain","toArray","docsFormatted","getTheCount","countCursor","result","count","getCount","getDocuments","time","docs","timeEnd","length","pageSize","currentPage"],"mappings":"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","file":"index.js","sourcesContent":["// @flow\nimport isEmpty from 'lodash/isEmpty';\nimport isFunction from 'lodash/isFunction';\nimport mapValues from 'lodash/mapValues';\nimport mapKeys from 'lodash/mapKeys';\nimport keyBy from 'lodash/keyBy';\nimport findLastIndex from 'lodash/findLastIndex';\nimport type {\n  ColumnsT,\n  ListTypeT,\n  MethodsContextT,\n  CollectionConfigT,\n  ListOptionsT\n} from '../../types';\nimport mongoAggregation from '../../utils/mongoAggregation';\nimport { createQuery, createQueryOptions } from '../../utils/query_utils';\nimport { formatDocs } from '../../utils/column_utils';\n\nconst DEBUG = false;\n\nconst DEFAULT_AGGREGATE_OPTIONS = {\n  cursor: {}, // return a cursor.\n  readPreference: 'secondaryPreferred' // read from secondary in a replica set\n};\nconst logObject = obj => {\n  function replacer(key, value) {\n    if (value instanceof RegExp) return `__REGEXP ${value.toString()}`;\n    return value;\n  }\n  console.log(JSON.stringify(obj, replacer, 2));\n};\n\nconst COUNT_PRESERVING_STAGES = ['$addFields', '$project', '$lookup', '$sort'];\n/**\n * intelligently add the $count stage after the last stage that influences the count\n * if no such stage is given, add only the $count stage\n * @param {Array} stages\n */\nconst addCount = stages => {\n  const lastCountChangingStage = findLastIndex(stages, stage =>\n    Object.keys(stage).find(key => !COUNT_PRESERVING_STAGES.includes(key))\n  );\n  return [...stages.slice(0, lastCountChangingStage + 1), { $count: 'count' }];\n};\n\n/* sort and project by array index (field.<index>.subfield) is not supported as it seems, but it works, when we remove the .<index>. */\nconst removeArrayIndex = columnId =>\n  columnId && columnId.replace(/\\.[0-9]+\\./, '.');\nconst cleanArrayIndexInSort = sort =>\n  mapKeys(sort, (value, key) => removeArrayIndex(key));\nconst extractColumnsToUse = (columns: ColumnsT, type: ListTypeT = 'ui') =>\n  columns\n    .map(column => {\n      if (typeof column === 'string') {\n        return column;\n      }\n      if (!column.include || column.include[type]) {\n        return column.id;\n      }\n      return null;\n    })\n    .filter(c => !isEmpty(c))\n    .map(removeArrayIndex);\n\nconst getPipeline = ({\n  context,\n  collectionConfig,\n  listOptions,\n  countOnly = false\n}: {\n  context: MethodsContextT,\n  collectionConfig: CollectionConfigT,\n  listOptions: ListOptionsT,\n  countOnly?: boolean\n}) => {\n  const { Meteor } = context;\n  const { filter, searchTerm, sortProperties, pageProperties } = listOptions;\n  const {\n    searchFields,\n    filterToBaseQuery,\n    textIndex,\n    aggregation\n  } = collectionConfig;\n  const useTextIndex = Meteor.isServer && Boolean(textIndex);\n  const baseQuery = createQuery({\n    filter,\n    searchFields,\n    searchTerm,\n    filterToBaseQuery,\n    useTextIndex\n  });\n\n  const queryOptions = createQueryOptions({\n    sortProperties,\n    pageProperties\n  });\n\n  if (DEBUG) logObject({ searchTerm, baseQuery, queryOptions });\n  /* eslint no-nested-ternary: 0*/\n\n  const aggregationOptions =\n    aggregation && isFunction(aggregation)\n      ? aggregation({\n          searchTerm,\n          filter,\n          collectionConfig,\n          listOptions,\n\n          countOnly\n        })\n      : aggregation;\n\n  const basePipeline = [{ $match: baseQuery }];\n  if (countOnly) {\n    return [\n      ...basePipeline,\n      ...(aggregationOptions && aggregationOptions.stages\n        ? addCount([\n            ...(aggregationOptions.stagesPreSort || []),\n            ...aggregationOptions.stages\n          ])\n        : [{ $count: 'count' }])\n    ];\n  }\n  const sortPipeline = [\n    ...(!isEmpty(queryOptions.sort)\n      ? [{ $sort: cleanArrayIndexInSort(queryOptions.sort) }]\n      : []),\n    ...(queryOptions.limit\n      ? [{ $limit: queryOptions.limit + (queryOptions.skip || 0) }]\n      : []),\n    { $skip: queryOptions.skip || 0 }\n  ];\n  const filterColumnsStage = {\n    $project: mapValues(\n      keyBy(\n        extractColumnsToUse(collectionConfig.columns, listOptions.listType)\n      ),\n      () => true\n    )\n  };\n  return [\n    ...basePipeline,\n    ...(aggregationOptions && aggregationOptions.stagesPreSort\n      ? aggregationOptions.stagesPreSort\n      : []),\n    ...(aggregationOptions && !aggregationOptions.postSort ? sortPipeline : []),\n    ...(aggregationOptions ? aggregationOptions.stages : []),\n    ...(!aggregationOptions || aggregationOptions.postSort ? sortPipeline : []),\n    filterColumnsStage\n  ];\n};\n\nconst getDocumentsAsArray = async (context, collectionConfig, listOptions) => {\n  const pipeline = getPipeline({\n    context,\n    collectionConfig,\n    listOptions\n  });\n  if (DEBUG) logObject(pipeline);\n  const docsCursor = await mongoAggregation(\n    collectionConfig.collection,\n    pipeline,\n    DEFAULT_AGGREGATE_OPTIONS\n  );\n\n  if (DEBUG) {\n    console.log('EXPLAIN:');\n    logObject(\n      await (await mongoAggregation(collectionConfig.collection, pipeline, {\n        ...DEFAULT_AGGREGATE_OPTIONS,\n        explain: true\n      })).toArray()\n    );\n  }\n\n  const docsFormatted = formatDocs(\n    docsCursor,\n    collectionConfig,\n    listOptions.listType\n  );\n  return await docsFormatted.toArray();\n};\n\nconst getTheCount = async (context, collectionConfig, listOptions) => {\n  const countCursor = await mongoAggregation(\n    collectionConfig.collection,\n    getPipeline({\n      context,\n      collectionConfig,\n      listOptions,\n\n      countOnly: true\n    }),\n    DEFAULT_AGGREGATE_OPTIONS\n  );\n\n  const result = await countCursor.toArray();\n  return result[0] ? result[0].count : 0;\n};\n\n/* eslint import/prefer-default-export: 0 */\nexport default async ({\n  context,\n  collectionConfig,\n  listOptions,\n\n  getCount = true,\n  getDocuments = true\n}: {\n  context: MethodsContextT,\n\n  collectionConfig: CollectionConfigT,\n  listOptions: ListOptionsT,\n  getCount?: boolean,\n  getDocuments?: boolean\n}) => {\n  if (DEBUG) console.log('listOptions', listOptions);\n  if (DEBUG) console.time('docs aggregation');\n\n  const docs = getDocuments\n    ? await getDocumentsAsArray(context, collectionConfig, listOptions)\n    : [];\n\n  if (DEBUG) console.timeEnd('docs aggregation');\n  if (DEBUG) console.log('num docs', docs && docs.length);\n\n  if (DEBUG) console.time('countAggregation');\n  let count = 0;\n\n  if (getCount) {\n    const { pageProperties } = listOptions;\n    if (docs && pageProperties && docs.length < pageProperties.pageSize) {\n      count =\n        docs.length +\n        (pageProperties.currentPage - 1) * pageProperties.pageSize;\n    } else {\n      count = await getTheCount(context, collectionConfig, listOptions);\n    }\n  }\n\n  if (DEBUG) console.timeEnd('countAggregation');\n  if (DEBUG) console.log('countAggregation result: ', count);\n\n  return {\n    docs,\n    count\n  };\n};\n"]}