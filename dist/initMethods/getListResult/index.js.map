{"version":3,"sources":["../../../src/initMethods/getListResult/index.js"],"names":["DEBUG","logObject","replacer","key","value","RegExp","toString","console","log","obj","COUNT_PRESERVING_STAGES","addCount","lastCountChangingStage","stages","stage","find","includes","slice","$count","removeArrayIndex","columnId","replace","cleanArrayIndexInSort","sort","extractColumnsToUse","columns","type","map","column","include","id","filter","c","getPipeline","context","collectionConfig","listOptions","countOnly","Meteor","searchTerm","sortProperties","pageProperties","searchFields","filterToBaseQuery","textIndex","aggregation","useTextIndex","isServer","Boolean","baseQuery","queryOptions","aggregationOptions","basePipeline","$match","sortPipeline","$sort","limit","$limit","skip","$skip","filterColumnsStage","$project","listType","postSort","getCount","getDocuments","time","pipeline","docs","collection","cursor","undefined","timeEnd","length","count","pageSize","currentPage","result","docsFormatted","allDocs"],"mappings":"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","file":"index.js","sourcesContent":["// @flow\nimport isEmpty from 'lodash/isEmpty';\nimport isFunction from 'lodash/isFunction';\nimport mapValues from 'lodash/mapValues';\nimport mapKeys from 'lodash/mapKeys';\nimport keyBy from 'lodash/keyBy';\nimport findLastIndex from 'lodash/findLastIndex';\nimport type {\n  ColumnsT,\n  ListTypeT,\n  MethodsContextT,\n  CollectionConfigT,\n  ListOptionsT\n} from '../../types';\nimport mongoAggregation, { cursorToArray } from '../../utils/mongoAggregation';\nimport { createQuery, createQueryOptions } from '../../utils/query_utils';\nimport { formatDocs } from '../../utils/column_utils';\n\nconst DEBUG = false;\n\nconst logObject = obj => {\n  function replacer(key, value) {\n    if (value instanceof RegExp) return `__REGEXP ${value.toString()}`;\n    return value;\n  }\n  console.log(JSON.stringify(obj, replacer, 2));\n};\n\nconst COUNT_PRESERVING_STAGES = ['$addFields', '$project', '$lookup', '$sort'];\n/**\n * intelligently add the $count stage after the last stage that influences the count\n * if no such stage is given, add only the $count stage\n * @param {Array} stages\n */\nconst addCount = stages => {\n  const lastCountChangingStage = findLastIndex(stages, stage =>\n    Object.keys(stage).find(key => !COUNT_PRESERVING_STAGES.includes(key))\n  );\n  return [...stages.slice(0, lastCountChangingStage + 1), { $count: 'count' }];\n};\n\n/* sort and project by array index (field.<index>.subfield) is not supported as it seems, but it works, when we remove the .<index>. */\nconst removeArrayIndex = columnId =>\n  columnId && columnId.replace(/\\.[0-9]+\\./, '.');\nconst cleanArrayIndexInSort = sort =>\n  mapKeys(sort, (value, key) => removeArrayIndex(key));\nconst extractColumnsToUse = (columns: ColumnsT, type: ListTypeT = 'ui') =>\n  columns\n    .map(column => {\n      if (typeof column === 'string') {\n        return column;\n      }\n      if (!column.include || column.include[type]) {\n        return column.id;\n      }\n      return null;\n    })\n    .filter(c => !isEmpty(c))\n    .map(removeArrayIndex);\n\nconst getPipeline = ({\n  context,\n  collectionConfig,\n  listOptions,\n  countOnly = false\n}: {\n  context: MethodsContextT,\n  collectionConfig: CollectionConfigT,\n  listOptions: ListOptionsT,\n  countOnly?: boolean\n}) => {\n  const { Meteor } = context;\n  const { filter, searchTerm, sortProperties, pageProperties } = listOptions;\n  const {\n    searchFields,\n    filterToBaseQuery,\n    textIndex,\n    aggregation\n  } = collectionConfig;\n  const useTextIndex = Meteor.isServer && Boolean(textIndex);\n  const baseQuery = createQuery({\n    filter,\n    searchFields,\n    searchTerm,\n    filterToBaseQuery,\n    useTextIndex\n  });\n\n  const queryOptions = createQueryOptions({\n    sortProperties,\n    pageProperties\n  });\n\n  if (DEBUG) logObject({ searchTerm, baseQuery, queryOptions });\n  /* eslint no-nested-ternary: 0*/\n\n  const aggregationOptions =\n    aggregation && isFunction(aggregation)\n      ? aggregation({\n          searchTerm,\n          filter,\n          collectionConfig,\n          listOptions,\n\n          countOnly\n        })\n      : aggregation;\n\n  const basePipeline = [{ $match: baseQuery }];\n  if (countOnly) {\n    return [\n      ...basePipeline,\n      ...(aggregationOptions && aggregationOptions.stages\n        ? addCount(aggregationOptions.stages)\n        : [{ $count: 'count' }])\n    ];\n  }\n  const sortPipeline = [\n    ...(!isEmpty(queryOptions.sort)\n      ? [{ $sort: cleanArrayIndexInSort(queryOptions.sort) }]\n      : []),\n    ...(queryOptions.limit\n      ? [{ $limit: queryOptions.limit + (queryOptions.skip || 0) }]\n      : []),\n    { $skip: queryOptions.skip || 0 }\n  ];\n  const filterColumnsStage = {\n    $project: mapValues(\n      keyBy(\n        extractColumnsToUse(collectionConfig.columns, listOptions.listType)\n      ),\n      () => true\n    )\n  };\n  return [\n    ...basePipeline,\n    ...(aggregationOptions && !aggregationOptions.postSort ? sortPipeline : []),\n    ...(aggregationOptions ? aggregationOptions.stages : []),\n    ...(!aggregationOptions || aggregationOptions.postSort ? sortPipeline : []),\n    filterColumnsStage\n  ];\n};\n\n/* eslint import/prefer-default-export: 0 */\nexport default ({\n  context,\n  collectionConfig,\n  listOptions,\n\n  getCount = true,\n  getDocuments = true\n}: {\n  context: MethodsContextT,\n\n  collectionConfig: CollectionConfigT,\n  listOptions: ListOptionsT,\n  getCount?: boolean,\n  getDocuments?: boolean\n}) => {\n  if (DEBUG) console.log('listOptions', listOptions);\n  if (DEBUG) console.time('docs aggregation');\n  const pipeline = getPipeline({\n    context,\n    collectionConfig,\n    listOptions\n  });\n  if (DEBUG) logObject(pipeline);\n\n  const docs = getDocuments\n    ? mongoAggregation(context, collectionConfig.collection, pipeline, {\n        cursor: {}\n      })\n    : undefined;\n  if (DEBUG) console.timeEnd('docs aggregation');\n  if (DEBUG) console.log('num docs', docs && docs.length);\n\n  if (DEBUG) console.time('countAggregation');\n  let count = 0;\n\n  if (getCount) {\n    const { pageProperties } = listOptions;\n\n    if (docs && pageProperties && docs.length < pageProperties.pageSize) {\n      count =\n        docs.length +\n        (pageProperties.currentPage - 1) * pageProperties.pageSize;\n    } else {\n      const result = cursorToArray(context, mongoAggregation(\n        context,\n        collectionConfig.collection,\n        getPipeline({\n          context,\n          collectionConfig,\n          listOptions,\n\n          countOnly: true\n        }),\n        { cursor: {} }\n      ));\n      count = result[0] ? result[0].count : 0;\n    }\n  }\n\n  if (DEBUG) console.timeEnd('countAggregation');\n  if (DEBUG) console.log('countAggregation result: ', count);\n  const docsFormatted =\n    docs && formatDocs(docs, collectionConfig, listOptions.listType);\n  const allDocs = cursorToArray(context, docsFormatted);\n \n  return {\n    docs: allDocs,\n    count\n  };\n};\n"]}