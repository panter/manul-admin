{"version":3,"sources":["../../../src/initMethods/getListResult/index.js"],"names":["DEBUG","logObject","replacer","key","value","RegExp","toString","console","log","obj","getPipeline","context","collectionConfig","listOptions","countOnly","Meteor","filter","searchTerm","sortProperties","pageProperties","searchFields","filterToBaseQuery","textIndex","aggregation","useTextIndex","isServer","Boolean","baseQuery","queryOptions","aggregationOptions","basePipeline","$match","$count","sortPipeline","sort","$sort","limit","$limit","skip","$skip","postSort","stages","getCount","getDocuments","time","pipeline","docsAggregation","collection","undefined","timeEnd","count","docs"],"mappings":"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","file":"index.js","sourcesContent":["// @flow\nimport isEmpty from 'lodash/isEmpty';\nimport isFunction from 'lodash/isFunction';\nimport type {\n  MethodsContextT,\n  CollectionConfigT,\n  ListOptionsT\n} from '../../types';\nimport mongoAggregation from '../../utils/mongoAggregation';\nimport { createQuery, createQueryOptions } from '../../utils/query_utils';\n\nconst DEBUG = true;\n\nconst logObject = obj => {\n  function replacer(key, value) {\n    if (value instanceof RegExp) return `__REGEXP ${value.toString()}`;\n    return value;\n  }\n  console.log(JSON.stringify(obj, replacer, 2));\n};\n\nconst getPipeline = ({\n  context,\n  collectionConfig,\n  listOptions,\n  countOnly = false\n}: {\n  context: MethodsContextT,\n  collectionConfig: CollectionConfigT,\n  listOptions: ListOptionsT,\n  countOnly?: boolean\n}) => {\n  const { Meteor } = context;\n  const { filter, searchTerm, sortProperties, pageProperties } = listOptions;\n  const {\n    searchFields,\n    filterToBaseQuery,\n    textIndex,\n    aggregation\n  } = collectionConfig;\n  const useTextIndex = Meteor.isServer && Boolean(textIndex);\n  const baseQuery = createQuery({\n    filter,\n    searchFields,\n    searchTerm,\n    filterToBaseQuery,\n    useTextIndex\n  });\n\n  const queryOptions = createQueryOptions({\n    sortProperties,\n    pageProperties\n  });\n  if (DEBUG) logObject({ searchTerm, baseQuery, queryOptions });\n  /* eslint no-nested-ternary: 0*/\n\n  const aggregationOptions =\n    aggregation && isFunction(aggregation)\n      ? aggregation({\n          searchTerm,\n          filter,\n          collectionConfig,\n          listOptions,\n          countOnly\n        })\n      : aggregation;\n\n  const basePipeline = [{ $match: baseQuery }];\n\n  if (countOnly) {\n    return [...basePipeline, { $count: 'count' }];\n  }\n  const sortPipeline = [\n    ...(!isEmpty(queryOptions.sort) ? [{ $sort: queryOptions.sort }] : []),\n    ...(queryOptions.limit\n      ? [{ $limit: queryOptions.limit + (queryOptions.skip || 0) }]\n      : []),\n    { $skip: queryOptions.skip || 0 }\n  ];\n\n  return [\n    ...basePipeline,\n    ...(aggregationOptions && !aggregationOptions.postSort ? sortPipeline : []),\n    ...(aggregationOptions ? aggregationOptions.stages : []),\n    ...(!aggregationOptions || aggregationOptions.postSort ? sortPipeline : [])\n  ];\n};\n\n/* eslint import/prefer-default-export: 0 */\nexport default ({\n  context,\n  collectionConfig,\n  listOptions,\n  getCount = true,\n  getDocuments = true\n}: {\n  context: MethodsContextT,\n\n  collectionConfig: CollectionConfigT,\n  listOptions: ListOptionsT,\n  getCount?: boolean,\n  getDocuments?: boolean\n}) => {\n  if (DEBUG) console.time('docs aggregation');\n  const pipeline = getPipeline({\n    context,\n    collectionConfig,\n    listOptions\n  });\n  if (DEBUG) logObject(pipeline);\n\n  const docsAggregation = getDocuments\n    ? mongoAggregation(context, collectionConfig.collection, pipeline)\n    : undefined;\n  if (DEBUG) console.timeEnd('docs aggregation');\n  /*\n  if (DEBUG) console.time('docs');\n  const docs = getDocuments\n    ? collectionConfig.collection.find(query, queryOptions).fetch()\n    : undefined;\n  if (DEBUG) console.timeEnd('docs');\n  \n\n  if (DEBUG) console.time('count');\n  const count = getCount\n    ? collectionConfig.collection.find(query).count()\n    : undefined;\n  if (DEBUG) console.timeEnd('count');\n\n    */\n  if (DEBUG) console.time('countAggregation');\n  const [{ count } = {}] = getCount\n    ? mongoAggregation(\n        context,\n        collectionConfig.collection,\n        getPipeline({\n          context,\n          collectionConfig,\n          listOptions,\n          countOnly: true\n        })\n      )\n    : [{ count: 0 }];\n  if (DEBUG) console.timeEnd('countAggregation');\n  console.log('countAggregation', count);\n  return { docs: docsAggregation, count };\n};\n"]}