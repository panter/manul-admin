{"version":3,"sources":["../../src/initMethods/list.js"],"names":["DEBUG","context","collectionName","collectionConfig","ValidatedMethod","name","validate","validator","clean","run","options","userId","Meteor","Error","unblock","query","queryOptions","console","time","docs","collection","find","fetch","timeEnd","count"],"mappings":";;;;;;AAEA;;;;AAOA;;AAEA;;;;AAEA,IAAMA,QAAQ,KAAd;;kBAEe,UACbC,OADa,EAEbC,cAFa,EAGbC,gBAHa;AAAA,SAKb,IAAIF,QAAQG,eAAZ,CAA4B;AAC1BC,0BAAoBH,cAApB,UAD0B;AAE1BI,cAAU,oBAAWC,SAAX,CAAqB,EAAEC,OAAO,KAAT,EAArB,CAFgB;AAG1BC,OAH0B,eAGtBC,OAHsB,EAGb;AACX,UAAI,CAAC,0BAAUR,cAAV,EAA0B,KAAKS,MAA/B,CAAL,EAA6C;AAC3C,cAAM,IAAIV,QAAQW,MAAR,CAAeC,KAAnB,CAAyB,aAAzB,EAAwC,qBAAxC,CAAN;AACD;AACD,WAAKC,OAAL;;AAJW,kCAKqB,mCAC9Bb,OAD8B,EAE9BC,cAF8B,EAG9BC,gBAH8B,EAI9BO,OAJ8B,CALrB;AAAA,UAKHK,KALG,yBAKHA,KALG;AAAA,UAKIC,YALJ,yBAKIA,YALJ;;AAYX,UAAIhB,KAAJ,EAAWiB,QAAQC,IAAR,CAAa,MAAb;;AAEX,UAAMC,OAAOhB,iBAAiBiB,UAAjB,CACVC,IADU,CACLN,KADK,EACEC,YADF,EAEVM,KAFU,EAAb;AAGA,UAAItB,KAAJ,EAAWiB,QAAQM,OAAR,CAAgB,MAAhB;AACX,UAAIvB,KAAJ,EAAWiB,QAAQC,IAAR,CAAa,OAAb;AACX,UAAMM,QAAQrB,iBAAiBiB,UAAjB,CAA4BC,IAA5B,CAAiCN,KAAjC,EAAwCS,KAAxC,EAAd;AACA,UAAIxB,KAAJ,EAAWiB,QAAQM,OAAR,CAAgB,OAAhB;AACX,aAAO;AACLJ,kBADK;AAELK;AAFK,OAAP;AAID;AA5ByB,GAA5B,CALa;AAAA,C","file":"list.js","sourcesContent":["// @flow\n\nimport isAllowed from '../is_allowed';\n\nimport type {\n  MethodsContextT,\n  CollectionNameT,\n  CollectionConfigT\n} from '../types';\nimport { ListSchema } from '../schemas';\n\nimport { getListQueryAndOptions } from './utils';\n\nconst DEBUG = false;\n\nexport default (\n  context: MethodsContextT,\n  collectionName: CollectionNameT,\n  collectionConfig: CollectionConfigT\n) =>\n  new context.ValidatedMethod({\n    name: `manulAdmin.${collectionName}.list`,\n    validate: ListSchema.validator({ clean: false }),\n    run(options) {\n      if (!isAllowed(collectionName, this.userId)) {\n        throw new context.Meteor.Error('not allowed', 'You are not allowed');\n      }\n      this.unblock();\n      const { query, queryOptions } = getListQueryAndOptions(\n        context,\n        collectionName,\n        collectionConfig,\n        options\n      );\n\n      if (DEBUG) console.time('docs');\n\n      const docs = collectionConfig.collection\n        .find(query, queryOptions)\n        .fetch();\n      if (DEBUG) console.timeEnd('docs');\n      if (DEBUG) console.time('count');\n      const count = collectionConfig.collection.find(query).count();\n      if (DEBUG) console.timeEnd('count');\n      return {\n        docs,\n        count\n      };\n    }\n  });\n"]}