{"version":3,"sources":["../../../src/initMethods/utils/index.js"],"names":["DEBUG","logObject","replacer","key","value","RegExp","toString","console","log","obj","getListQueryAndOptions","context","collectionName","collectionConfig","listArguments","Meteor","filter","searchTerm","sortProperties","pageProperties","searchFields","transformFilter","textIndex","hasTextIndex","isServer","Boolean","query","queryOptions"],"mappings":";;;;;;;;;;;AASA;;;;AAKA,IAAMA,QAAQ,IAAd;;AAEA,IAAMC,YAAY,SAAZA,SAAY,MAAO;AACvB,WAASC,QAAT,CAAkBC,GAAlB,EAAuBC,KAAvB,EAA8B;AAC5B,QAAIA,iBAAiBC,MAArB,EAA6B,qBAAmBD,MAAME,QAAN,EAAnB;AAC7B,WAAOF,KAAP;AACD;AACDG,UAAQC,GAAR,CAAY,yBAAeC,GAAf,EAAoBP,QAApB,EAA8B,CAA9B,CAAZ;AACD,CAND;;AAQA;AACO,IAAMQ,0DAAyB,SAAzBA,sBAAyB,CACpCC,OADoC,EAEpCC,cAFoC,EAGpCC,gBAHoC,EAIpCC,aAJoC,EAKjC;AAAA,MACKC,MADL,GACgBJ,OADhB,CACKI,MADL;AAAA,MAEKC,MAFL,GAE4DF,aAF5D,CAEKE,MAFL;AAAA,MAEaC,UAFb,GAE4DH,aAF5D,CAEaG,UAFb;AAAA,MAEyBC,cAFzB,GAE4DJ,aAF5D,CAEyBI,cAFzB;AAAA,MAEyCC,cAFzC,GAE4DL,aAF5D,CAEyCK,cAFzC;AAAA,MAGKC,YAHL,GAGkDP,gBAHlD,CAGKO,YAHL;AAAA,MAGmBC,eAHnB,GAGkDR,gBAHlD,CAGmBQ,eAHnB;AAAA,MAGoCC,SAHpC,GAGkDT,gBAHlD,CAGoCS,SAHpC;;AAIH,MAAMC,eAAeR,OAAOS,QAAP,IAAmBC,QAAQH,SAAR,CAAxC;AACA,MAAMI,QAAQ,gCACZV,MADY,EAEZC,cAAc,EAAEG,0BAAF,EAAgBH,sBAAhB,EAFF,EAGZI,eAHY,EAIZE,YAJY,CAAd;;AAOA,MAAMI,eAAe,4CAA0B;AAC7CT,kCAD6C;AAE7CC;AAF6C,GAA1B,CAArB;AAIA,MAAInB,KAAJ,EAAWC,UAAU,EAAEgB,sBAAF,EAAcS,YAAd,EAAqBC,0BAArB,EAAV;;AAEX,SAAO;AACLD,gBADK;AAELC;AAFK,GAAP;AAID,CA3BM","file":"index.js","sourcesContent":["// @flow\n\nimport type {\n  MethodsContextT,\n  CollectionNameT,\n  CollectionConfigT,\n  ListArgumentsT\n} from '../../types';\n\nimport {\n  filterToQuery,\n  gridOptionsToQueryOptions\n} from '../../utils/query_utils';\n\nconst DEBUG = true;\n\nconst logObject = obj => {\n  function replacer(key, value) {\n    if (value instanceof RegExp) return `__REGEXP ${value.toString()}`;\n    return value;\n  }\n  console.log(JSON.stringify(obj, replacer, 2));\n};\n\n/* eslint import/prefer-default-export: 0*/\nexport const getListQueryAndOptions = (\n  context: MethodsContextT,\n  collectionName: CollectionNameT,\n  collectionConfig: CollectionConfigT,\n  listArguments: ListArgumentsT\n) => {\n  const { Meteor } = context;\n  const { filter, searchTerm, sortProperties, pageProperties } = listArguments;\n  const { searchFields, transformFilter, textIndex } = collectionConfig;\n  const hasTextIndex = Meteor.isServer && Boolean(textIndex);\n  const query = filterToQuery(\n    filter,\n    searchTerm && { searchFields, searchTerm },\n    transformFilter,\n    hasTextIndex\n  );\n\n  const queryOptions = gridOptionsToQueryOptions({\n    sortProperties,\n    pageProperties\n  });\n  if (DEBUG) logObject({ searchTerm, query, queryOptions });\n\n  return {\n    query,\n    queryOptions\n  };\n};\n"]}