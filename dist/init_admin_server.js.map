{"version":3,"sources":["../src/init_admin_server.js"],"names":["config","Meteor","ValidatedMethod","SimpleSchema","isAllowed","collections","createTextIndex","name","collection","textIndex","indexDef","_ensureIndex","background","e","console","error","initTextIndex","forEach","createPublication","getPublications","edit","publish","publishEdit","_id","userId","find","createPublications"],"mappings":";;;;;;;;;;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;AAEA;;;;kBAIe,gBAAmDA,MAAnD,EAA8D;AAAA,MAA3DC,MAA2D,QAA3DA,MAA2D;AAAA,MAAnDC,eAAmD,QAAnDA,eAAmD;AAAA,+BAAlCC,YAAkC;AAAA,MAAlCA,YAAkC,qCAAnB,IAAmB;;AAC3E,MAAMC,YAAY,0BAAUJ,MAAV,CAAlB;AAD2E,MAEnEK,WAFmE,GAEnDL,MAFmD,CAEnEK,WAFmE;;AAG3E,MAAMC,kBAAkB,SAAlBA,eAAkB,OAAQ;AAAA,4BACID,YAAYE,IAAZ,CADJ;AAAA,QACtBC,UADsB,qBACtBA,UADsB;AAAA,QACVC,SADU,qBACVA,SADU;;AAE9B,QAAIA,SAAJ,EAAe;AACb,UAAMC,WAAW,yBAAU,qBAAMD,SAAN,CAAV,EAA4B;AAAA,eAAM,MAAN;AAAA,OAA5B,CAAjB;;AAEA,UAAI;AACFD,mBAAWG,YAAX,CAAwBD,QAAxB,EAAkC;AAChCE,sBAAY,IADoB;AAEhCL,sCAA0BA;AAFM,SAAlC;AAID,OALD,CAKE,OAAOM,CAAP,EAAU;AACVC,gBAAQC,KAAR,CAAc,iBAAd,EAAiCF,CAAjC;AACD;AACF;AACF,GAdD;AAeA,MAAMG,gBAAgB,SAAhBA,aAAgB,GAAM;AAC1B,wBAAYX,WAAZ,EAAyBY,OAAzB,CAAiCX,eAAjC;AACD,GAFD;AAGAU;AACA,MAAME,oBAAoB,SAApBA,iBAAoB,OAAQ;AAAA,gCACf,4BAAiBC,eAAjB,CAAiCZ,IAAjC,CADe;AAAA,QACxBa,IADwB,yBACxBA,IADwB;;AAAA,QAExBZ,UAFwB,GAETH,YAAYE,IAAZ,CAFS,CAExBC,UAFwB;;AAIhC;;AACAP,WAAOoB,OAAP,CAAeD,IAAf,EAAqB,SAASE,WAAT,CAAqBC,GAArB,EAA0B;AAC7C,UAAInB,UAAUG,IAAV,EAAgB,KAAKiB,MAArB,CAAJ,EAAkC;AAChC,eAAOhB,WAAWiB,IAAX,CAAgBF,GAAhB,CAAP;AACD;AACF,KAJD;AAKD,GAVD;AAWA,MAAMG,qBAAqB,SAArBA,kBAAqB,GAAM;AAC/B,wBAAYrB,WAAZ,EAAyBY,OAAzB,CAAiCC,iBAAjC;AACD,GAFD;AAGAQ;AACA,gCAAc,EAAEzB,cAAF,EAAUC,gCAAV,EAA2BC,0BAA3B,EAAd,EAAyDH,MAAzD;AACD,C","file":"init_admin_server.js","sourcesContent":["import { keyBy, mapValues } from \"lodash\";\nimport IsAllowed from \"./is_allowed\";\nimport createMethods from \"./create_methods\";\nimport publicationUtils from \"./utils/publication_utils\";\n\n// SimpleSchema needs only to be passed, if its not in npm (version 2)\n\n/**\nupdate: we no longer publish list, because we use a method call for that\n*/\n\nexport default ({ Meteor, ValidatedMethod, SimpleSchema = null }, config) => {\n  const isAllowed = IsAllowed(config);\n  const { collections } = config;\n  const createTextIndex = name => {\n    const { collection, textIndex } = collections[name];\n    if (textIndex) {\n      const indexDef = mapValues(keyBy(textIndex), () => \"text\");\n\n      try {\n        collection._ensureIndex(indexDef, {\n          background: true,\n          name: `manul-admin-text_${name}`\n        });\n      } catch (e) {\n        console.error(\"can't set index\", e);\n      }\n    }\n  };\n  const initTextIndex = () => {\n    Object.keys(collections).forEach(createTextIndex);\n  };\n  initTextIndex();\n  const createPublication = name => {\n    const { edit } = publicationUtils.getPublications(name);\n    const { collection } = collections[name];\n\n    /* eslint meteor/audit-argument-checks: 0*/\n    Meteor.publish(edit, function publishEdit(_id) {\n      if (isAllowed(name, this.userId)) {\n        return collection.find(_id);\n      }\n    });\n  };\n  const createPublications = () => {\n    Object.keys(collections).forEach(createPublication);\n  };\n  createPublications();\n  createMethods({ Meteor, ValidatedMethod, SimpleSchema }, config);\n};\n"]}