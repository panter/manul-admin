{"version":3,"sources":["../src/routes.jsx"],"names":["containers","injectDeps","adminContext","adminRoutes","components","config","createRoute","type","collectionName","aggregationName","Container","getRoute","path","name","route","action","params","mountFunc","useReactMounter","require","mount","render","layout","content","collections","forEach"],"mappings":";;;;;;;;;;;;;;AACA;;;;AAEA;;;;AAEA;;IAAYA,U;;;;;;AAEZ;kBACe,UAACC,UAAD,QAAkC;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;AAAA,MACvCC,WADuC,GACHD,YADG,CACvCC,WADuC;AAAA,MAC1BC,UAD0B,GACHF,YADG,CAC1BE,UAD0B;AAAA,MACdC,MADc,GACHH,YADG,CACdG,MADc;;;AAG/C,MAAMC,cAAc,SAAdA,WAAc,CAACC,IAAD,EAAOC,cAAP,EAAkD;AAAA,QAA3BC,eAA2B,uEAAT,IAAS;;AACpE,QAAMC,YAAYV,WAAW,0BAAWO,IAAX,CAAX,CAAlB;;AADoE,+BAE7C,sBAAWI,QAAX,CACrBJ,IADqB,EAErBC,cAFqB,EAGrBC,eAHqB,CAF6C;AAAA,QAE5DG,IAF4D,wBAE5DA,IAF4D;AAAA,QAEtDC,IAFsD,wBAEtDA,IAFsD;;AAOpEV,gBAAYW,KAAZ,CAAkBF,IAAlB,EAAwB;AACtBC,gBADsB;AAEtBE,YAFsB,kBAEfC,MAFe,EAEP;AACb,YAAMC,YAAYZ,OAAOa,eAAP,CAAuB;AAAvB,UACdC,QAAQ,eAAR,EAAyBC,KADX,GAEd,KAAKC,MAFT;AAGAJ,kBAAUhB,WAAWG,WAAWkB,MAAtB,CAAV,EAAyC;AACvCC,mBAAS;AAAA,mBACP,8BAAC,SAAD;AACE,8BAAgBf,cADlB;AAEE,+BAAiBC,eAFnB;AAGE,oBAAMF,IAHR;AAIE,sBAAQS;AAJV,cADO;AAAA;AAD8B,SAAzC;AAUD;AAhBqB,KAAxB;AAkBD,GAzBD;AA0BA,sBAAYX,OAAOmB,WAAnB,EAAgCC,OAAhC,CAAwC,0BAAkB;AACxD,KAAC,QAAD,EAAW,MAAX,EAAmB,MAAnB,EAA2BA,OAA3B,CAAmC,gBAAQ;AACzCnB,kBAAYC,IAAZ,EAAkBC,cAAlB;AACD,KAFD;AAGD,GAJD;AAKD,C","file":"routes.js","sourcesContent":["import { isEmpty, upperFirst } from 'lodash/fp';\nimport React from 'react';\n\nimport routeUtils from './utils/route_utils';\n\nimport * as containers from './containers';\n\n/* eslint react/display-name: 0*/\nexport default (injectDeps, { adminContext }) => {\n  const { adminRoutes, components, config } = adminContext;\n\n  const createRoute = (type, collectionName, aggregationName = null) => {\n    const Container = containers[upperFirst(type)];\n    const { path, name } = routeUtils.getRoute(\n      type,\n      collectionName,\n      aggregationName\n    );\n    adminRoutes.route(path, {\n      name,\n      action(params) {\n        const mountFunc = config.useReactMounter // useReactMounter is deprecated\n          ? require('react-mounter').mount\n          : this.render;\n        mountFunc(injectDeps(components.layout), {\n          content: () => (\n            <Container\n              collectionName={collectionName}\n              aggregationName={aggregationName}\n              type={type}\n              params={params}\n            />\n          )\n        });\n      }\n    });\n  };\n  Object.keys(config.collections).forEach(collectionName => {\n    ['create', 'list', 'edit'].forEach(type => {\n      createRoute(type, collectionName);\n    });\n  });\n};\n"]}