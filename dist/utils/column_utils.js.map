{"version":3,"sources":["../../src/utils/column_utils.js"],"names":["filterColumns","columns","type","filter","column","include","getColumnTitleI18nKey","collectionName","collectionConfig","title","columnsI18n","id","formatDocs","docs","config","listType","formats","reduce","acc","format","formatObj","obj","parentKey","value","key","fullKey","map","doc"],"mappings":";;;;;;;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;;;AAGA;AACO,IAAMA,wCAAgB,SAAhBA,aAAgB,CAACC,OAAD,EAA6BC,IAA7B;AAAA,SAC3BD,QAAQE,MAAR,CACE;AAAA,WACE,OAAOC,MAAP,KAAkB,QAAlB,IAA8B,CAACA,OAAOC,OAAtC,IAAiDD,OAAOC,OAAP,CAAeH,IAAf,CADnD;AAAA,GADF,CAD2B;AAAA,CAAtB;AAMA,IAAMI,wDAAwB,SAAxBA,qBAAwB;AAAA,MACnCC,cADmC,QACnCA,cADmC;AAAA,MAEnCC,gBAFmC,QAEnCA,gBAFmC;AAAA,MAGnCJ,MAHmC,QAGnCA,MAHmC;AAAA,SASnC,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,OAAOK,KAArC,GACIL,OAAOK,KADX,IAEOD,iBAAiBE,WAAjB,IAAgCH,cAFvC,WAGM,OAAOH,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsCA,OAAOO,EAHnD,CATmC;AAAA,CAA9B;;AAeA,IAAMC,kCAAa,SAAbA,UAAa,CACxBC,IADwB,EAExBC,MAFwB,EAGxBC,QAHwB,EAIX;AACb,MAAMC,UAAUF,OAAOb,OAAP,CAAegB,MAAf,CAAsB,UAACC,GAAD,EAAMd,MAAN,EAAiB;AACrD,QAAI,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,OAAOe,MAAzC,EAAiD;AAC/C,UAAI,0BAAWf,OAAOe,MAAlB,CAAJ,EAA+B;AAC7B,0CACKD,GADL,oCAEGd,OAAOO,EAFV,EAEeP,OAAOe,MAFtB;AAID,OALD,MAKO,IAAIf,OAAOe,MAAP,CAAcJ,QAAd,CAAJ,EAA6B;AAClC,0CACKG,GADL,oCAEGd,OAAOO,EAFV,EAEeP,OAAOe,MAAP,CAAcJ,QAAd,CAFf;AAID;AACF;AACD,WAAOG,GAAP;AACD,GAfe,EAeb,EAfa,CAAhB;AAgBA,MAAME,YAAY,SAAZA,SAAY,CAACC,GAAD;AAAA,QAAMC,SAAN,uEAAkB,IAAlB;AAAA,WAChB,yBAAUD,GAAV,EAAe,UAACE,KAAD,EAAQC,GAAR,EAAgB;AAC7B,UAAMC,UAAUH,YAAeA,SAAf,SAA4BE,GAA5B,GAAoCA,GAApD;AACA,UAAIR,QAAQS,OAAR,CAAJ,EAAsB;AACpB,eAAOT,QAAQS,OAAR,EAAiB,EAAEF,YAAF,EAASC,KAAKC,OAAd,EAAjB,CAAP;AACD,OAFD,MAEO,IAAI,wBAASF,KAAT,CAAJ,EAAqB;AAC1B,eAAOH,UAAUG,KAAV,EAAiBE,OAAjB,CAAP;AACD;AACD,aAAOF,KAAP;AACD,KARD,CADgB;AAAA,GAAlB;;AAWA,SAAOV,KAAKa,GAAL,CAAS,UAACC,GAAD;AAAA,WAAaP,UAAUO,GAAV,CAAb;AAAA,GAAT,CAAP;AACD,CAjCM","file":"column_utils.js","sourcesContent":["// @flow\nimport isFunction from 'lodash/isFunction';\nimport mapValues from 'lodash/mapValues';\nimport isObject from 'lodash/isObject';\nimport type { ListTypeT, ColumnDefT, CollectionConfigT } from '../types';\n\n/* eslint import/prefer-default-export: 0*/\nexport const filterColumns = (columns: Array<ColumnDefT>, type: ListTypeT) =>\n  columns.filter(\n    column =>\n      typeof column === 'string' || !column.include || column.include[type]\n  );\n\nexport const getColumnTitleI18nKey = ({\n  collectionName,\n  collectionConfig,\n  column\n}: {\n  collectionName: string,\n  collectionConfig: CollectionConfigT,\n  column: ColumnDefT\n}) =>\n  typeof column !== 'string' && column.title\n    ? column.title\n    : `${collectionConfig.columnsI18n || collectionName}.${\n        typeof column === 'string' ? column : column.id\n      }`;\n\nexport const formatDocs = (\n  docs: Array<*>,\n  config: CollectionConfigT,\n  listType: ListTypeT\n): Array<*> => {\n  const formats = config.columns.reduce((acc, column) => {\n    if (typeof column !== 'string' && column.format) {\n      if (isFunction(column.format)) {\n        return {\n          ...acc,\n          [column.id]: column.format\n        };\n      } else if (column.format[listType]) {\n        return {\n          ...acc,\n          [column.id]: column.format[listType]\n        };\n      }\n    }\n    return acc;\n  }, {});\n  const formatObj = (obj, parentKey = null) =>\n    mapValues(obj, (value, key) => {\n      const fullKey = parentKey ? `${parentKey}.${key}` : key;\n      if (formats[fullKey]) {\n        return formats[fullKey]({ value, key: fullKey });\n      } else if (isObject(value)) {\n        return formatObj(value, fullKey);\n      }\n      return value;\n    });\n\n  return docs.map((doc: {}) => formatObj(doc));\n};\n"]}