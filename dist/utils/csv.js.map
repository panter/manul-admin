{"version":3,"sources":["../../src/utils/csv.js"],"names":["exportAsCsv","filename","keys","columnTitles","data","transforms","useBom","delimiter","quotes","nullValue","defaultNullValue","nullValues","additionalProps","columns","dataPadded","map","key","index","valueOrDefault","entry","transform","papaOptions","csv","unparse","fields","window","Blob","type"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;;;AAYA,IAAMA,cAAc,SAAdA,WAAc,OAYd;AAAA,MAXJC,QAWI,QAXJA,QAWI;AAAA,MAVJC,IAUI,QAVJA,IAUI;AAAA,MATJC,YASI,QATJA,YASI;AAAA,MARJC,IAQI,QARJA,IAQI;AAAA,6BAPJC,UAOI;AAAA,MAPJA,UAOI,mCAPS,IAOT;AAAA,yBANJC,MAMI;AAAA,MANJA,MAMI,+BANK,KAML;AAAA,4BALJC,SAKI;AAAA,MALJA,SAKI,kCALQ,GAKR;AAAA,yBAJJC,MAII;AAAA,MAJJA,MAII,+BAJK,IAIL;AAAA,4BAHJC,SAGI;AAAA,MAHOC,gBAGP,kCAH0B,EAG1B;AAAA,6BAFJC,UAEI;AAAA,MAFJA,UAEI,mCAFS,EAET;AAAA,MADDC,eACC;;AACJ;AACA;AACA;;AAEA,MAAMC,UAAUV,gBAAgBD,IAAhC;AACA,MAAMY,aAAaV,KAAKW,GAAL,CAAS;AAAA,WAC1Bb,KAAKa,GAAL,CAAS,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACvB,UAAMC,iBAAiB,mBACrBC,KADqB,EAErBH,GAFqB,EAGrB,wBAASL,UAAT,IACI,mBAAIA,UAAJ,EAAgBK,GAAhB,EAAqBN,gBAArB,CADJ,GAEIC,WAAWM,KAAX,KAAqBP,gBALJ,CAAvB;AAOA;AACA,UAAMU,YAAYf,aACd,wBAASA,UAAT,IACE,mBAAIA,UAAJ,EAAgBW,GAAhB,CADF,GAEEX,WAAWY,KAAX,CAHY,GAId,IAJJ;AAKA,aAAOG,YAAYA,UAAUF,cAAV,CAAZ,GAAwCA,cAA/C;AACD,KAfD,CAD0B;AAAA,GAAT,CAAnB;AAkBA,MAAMG,uCAAgBd,oBAAhB,EAA2BC,cAA3B,IAAsCI,eAAtC,CAAN;AACA,MAAMU,MAAM,oBAAKC,OAAL,CAAa,EAAEC,QAAQX,OAAV,EAAmBT,MAAMU,UAAzB,EAAb,EAAoDO,WAApD,CAAZ;AACA,yBACE,IAAII,OAAOC,IAAX,CAAgB,CAACJ,GAAD,CAAhB,EAAuB,EAAEK,MAAM,0BAAR,EAAvB,CADF,EAEK1B,QAFL,WAGE,CAACK,MAHH;AAKD,CA3CD;;kBA6Ce,EAAEN,wBAAF,E","file":"csv.js","sourcesContent":["import get from 'lodash/get';\nimport isObject from 'lodash/isObject';\nimport Papa from 'papaparse';\nimport { saveAs } from 'file-saver';\n\n/**\ncreate a csv-file in the browser from the given data\n\ndata: Array of documents\nkeys: all keys of every document that should be included\nfilename: the filename of the resulting csv-file\ncolumnTitles: the column titles on the first row, need to be in the same order as keys\nuseBom: whether to include a UTF-16 byte order mark\ndelimiter: the delimiter for the csv\nquotes: whether to add quotes around fields\nany additional property will be passed to papaparse, see http://papaparse.com/docs#json-to-csv\n**/\nconst exportAsCsv = ({\n  filename,\n  keys,\n  columnTitles,\n  data,\n  transforms = null,\n  useBom = false,\n  delimiter = ';',\n  quotes = true,\n  nullValue: defaultNullValue = '', // deprecated\n  nullValues = [], // can also be object\n  ...additionalProps\n}) => {\n  // we encode missing values with \"NULL\"\n  // because CSV has no concept of null/missing values\n  // good read: http://www.garretwilson.com/blog/2009/04/23/csvnull.xhtml\n\n  const columns = columnTitles || keys;\n  const dataPadded = data.map(entry =>\n    keys.map((key, index) => {\n      const valueOrDefault = get(\n        entry,\n        key,\n        isObject(nullValues)\n          ? get(nullValues, key, defaultNullValue)\n          : nullValues[index] || defaultNullValue\n      );\n      /* eslint no-nested-ternary: 0*/\n      const transform = transforms\n        ? isObject(transforms)\n          ? get(transforms, key)\n          : transforms[index]\n        : null;\n      return transform ? transform(valueOrDefault) : valueOrDefault;\n    })\n  );\n  const papaOptions = { delimiter, quotes, ...additionalProps };\n  const csv = Papa.unparse({ fields: columns, data: dataPadded }, papaOptions);\n  saveAs(\n    new window.Blob([csv], { type: 'text/plain;charset=utf-8' }),\n    `${filename}.csv`,\n    !useBom\n  );\n};\n\nexport default { exportAsCsv };\n"]}