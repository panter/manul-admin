{"version":3,"sources":["../../src/utils/csv.js"],"names":["exportAsCsv","filename","keys","columnTitles","data","transforms","useBom","delimiter","quotes","nullValue","additionalProps","columns","dataPadded","map","key","index","valueOrDefault","entry","transform","papaOptions","csv","unparse","fields","window","Blob","type"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;;;AAYA,IAAMA,cAAc,SAAdA,WAAc,OAWd;AAAA,MAVJC,QAUI,QAVJA,QAUI;AAAA,MATJC,IASI,QATJA,IASI;AAAA,MARJC,YAQI,QARJA,YAQI;AAAA,MAPJC,IAOI,QAPJA,IAOI;AAAA,6BANJC,UAMI;AAAA,MANJA,UAMI,mCANS,IAMT;AAAA,yBALJC,MAKI;AAAA,MALJA,MAKI,+BALK,KAKL;AAAA,4BAJJC,SAII;AAAA,MAJJA,SAII,kCAJQ,GAIR;AAAA,yBAHJC,MAGI;AAAA,MAHJA,MAGI,+BAHK,IAGL;AAAA,4BAFJC,SAEI;AAAA,MAFJA,SAEI,kCAFQ,MAER;AAAA,MADDC,eACC;;AACJ;AACA;AACA;;AAEA,MAAMC,UAAUR,gBAAgBD,IAAhC;AACA,MAAMU,aAAaR,KAAKS,GAAL,CAAS;AAAA,WAC1BX,KAAKW,GAAL,CAAS,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACvB,UAAMC,iBAAiB,mBAAIC,KAAJ,EAAWH,GAAX,EAAgBL,SAAhB,CAAvB;AACA;AACA,UAAMS,YAAYb,aACd,wBAASA,UAAT,IACE,mBAAIA,UAAJ,EAAgBS,GAAhB,CADF,GAEET,WAAWU,KAAX,CAHY,GAId,IAJJ;AAKA,aAAOG,YAAYA,UAAUF,cAAV,CAAZ,GAAwCA,cAA/C;AACD,KATD,CAD0B;AAAA,GAAT,CAAnB;AAYA,MAAMG,uCAAgBZ,oBAAhB,EAA2BC,cAA3B,IAAsCE,eAAtC,CAAN;AACA,MAAMU,MAAM,oBAAKC,OAAL,CAAa,EAAEC,QAAQX,OAAV,EAAmBP,MAAMQ,UAAzB,EAAb,EAAoDO,WAApD,CAAZ;AACA,yBACE,IAAII,OAAOC,IAAX,CAAgB,CAACJ,GAAD,CAAhB,EAAuB,EAAEK,MAAM,0BAAR,EAAvB,CADF,EAEKxB,QAFL,WAGE,CAACK,MAHH;AAKD,CApCD;;kBAsCe,EAAEN,wBAAF,E","file":"csv.js","sourcesContent":["import get from 'lodash/get';\nimport isObject from 'lodash/isObject';\nimport Papa from 'papaparse';\nimport { saveAs } from 'file-saver';\n\n/**\ncreate a csv-file in the browser from the given data\n\ndata: Array of documents\nkeys: all keys of every document that should be included\nfilename: the filename of the resulting csv-file\ncolumnTitles: the column titles on the first row, need to be in the same order as keys\nuseBom: whether to include a UTF-16 byte order mark\ndelimiter: the delimiter for the csv\nquotes: whether to add quotes around fields\nany additional property will be passed to papaparse, see http://papaparse.com/docs#json-to-csv\n**/\nconst exportAsCsv = ({\n  filename,\n  keys,\n  columnTitles,\n  data,\n  transforms = null,\n  useBom = false,\n  delimiter = ';',\n  quotes = true,\n  nullValue = 'NULL',\n  ...additionalProps\n}) => {\n  // we encode missing values with \"NULL\"\n  // because CSV has no concept of null/missing values\n  // good read: http://www.garretwilson.com/blog/2009/04/23/csvnull.xhtml\n\n  const columns = columnTitles || keys;\n  const dataPadded = data.map(entry =>\n    keys.map((key, index) => {\n      const valueOrDefault = get(entry, key, nullValue);\n      /* eslint no-nested-ternary: 0*/\n      const transform = transforms\n        ? isObject(transforms)\n          ? get(transforms, key)\n          : transforms[index]\n        : null;\n      return transform ? transform(valueOrDefault) : valueOrDefault;\n    })\n  );\n  const papaOptions = { delimiter, quotes, ...additionalProps };\n  const csv = Papa.unparse({ fields: columns, data: dataPadded }, papaOptions);\n  saveAs(\n    new window.Blob([csv], { type: 'text/plain;charset=utf-8' }),\n    `${filename}.csv`,\n    !useBom\n  );\n};\n\nexport default { exportAsCsv };\n"]}