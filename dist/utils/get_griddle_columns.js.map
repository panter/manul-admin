{"version":3,"sources":["../../src/utils/get_griddle_columns.jsx"],"names":["PencilIcon","require","CustomHeadingBase","span","ActionCell","p","ColumnDef","title","icon","text","label","getActionsColumn","RowActions","props","rowData","map","Action","index","getColumns","collectionName","columns","columnsI18n","getTitle","id","EditAction","_id","SelectAction","onSelect","getDefaultActions","hideDefaultRowActions","isAggregation","isLookup","columnDefs","DefaultActions","actionColumn"],"mappings":"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","file":"get_griddle_columns.js","sourcesContent":["import { ColumnDefinition } from 'griddle-react';\nimport React from 'react';\nimport { isString } from 'lodash/fp';\nimport { T } from '@panter/manul-i18n';\nimport styled from 'styled-components';\nimport enhanceWithRowData from '../hocs/enhance_with_row_data';\nimport {\n  GriddleActionButton,\n  GriddleActionIconLinkButton,\n} from './griddle_action_button';\n\nconst PencilIcon = require('react-icons/lib/go/pencil');\n\nconst CustomHeadingBase = styled.span`\n  white-space: nowrap;\n  margin-right: 10px;\n`;\n\nconst ActionCell = styled.p`\n  display: flex;\n  align-items: center;\n  margin-bottom: 0;\n`;\n\n\nconst ColumnDef = ({ title, icon }) => (\n  <T _id={title}>\n    {(text) => {\n      const label = text || title;\n      return (\n        <CustomHeadingBase>\n          <span>{label}</span>\n          {icon && (<span>{icon}</span>)}\n        </CustomHeadingBase>\n      );\n    }}\n  </T>\n);\n\nconst getActionsColumn = ({ RowActions = [], ...props }) => (\n  <ColumnDefinition\n    id=\"_actions\"\n    title=\" \"\n    key=\"_actions\"\n    order={-1}\n    customComponent={enhanceWithRowData(({ rowData }) => (\n      <ActionCell>\n        {RowActions.map(\n          (Action, index) => <Action key={index} rowData={rowData} {...props} />,\n        )}\n      </ActionCell>\n    ))}\n  />\n);\n\nconst getColumns = ({ collectionName, columns, columnsI18n = `${collectionName}` }) => {\n  const getTitle = id => `${columnsI18n}.${id}`;\n  return columns.map(\n    (props, index) => {\n      if (isString(props)) {\n        return (\n          <ColumnDefinition\n            order={index + 1}\n            key={props}\n            customHeadingComponent={ColumnDef}\n            title={getTitle(props)}\n            id={props}\n          />\n        );\n      }\n      return (\n        <ColumnDefinition\n          title={getTitle(props.id)}\n          key={props.id}\n          {...props}\n          customHeadingComponent={ColumnDef}\n          order={index + 1}\n        />);\n    },\n  );\n};\n\nconst EditAction = ({ collectionName, rowData: { _id } }) => (\n  <GriddleActionIconLinkButton\n    noMinWidth\n    noMinHeight\n    routeName={`admin.${collectionName}.edit`}\n    params={{ _id }}\n    icon={PencilIcon}\n  />\n);\n\nconst SelectAction = ({ onSelect, rowData: { _id } }) => (\n  <GriddleActionButton\n    onClick={() => onSelect(_id)}\n  >\n    Select\n  </GriddleActionButton>\n);\nconst getDefaultActions = ({ hideDefaultRowActions, isAggregation, isLookup }) => {\n  if (hideDefaultRowActions) {\n    return [];\n  }\n  if (isLookup) {\n    return [SelectAction];\n  }\n  if (!isAggregation) {\n    return [EditAction];\n  }\n  return [];\n};\n\nexport default ({ RowActions = [], ...props }) => {\n  const columnDefs = getColumns(props);\n  const DefaultActions = getDefaultActions(props);\n  const actionColumn = getActionsColumn({\n    RowActions: [...DefaultActions, ...RowActions], ...props,\n  });\n  return [actionColumn, ...columnDefs];\n};\n\n"]}