{"version":3,"sources":["../../src/utils/query_utils.js"],"names":["removeEmptyObjects","o","selector","queryListFromTerm","term","field","$regex","$options","queryForTerm","$or","searchFields","termToTermList","split","map","createFieldSearchQuery","terms","useTextIndex","$text","$search","t","join","$and","createQuery","filter","searchTerm","filterToBaseQuery","f","push","sortPropsToMongoSort","sortAscending","pagePropertiesToLimitAndSkip","currentPage","pageSize","limit","skip","createQueryOptions","sortProperties","pageProperties","sort","limitAndSkip"],"mappings":"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","file":"query_utils.js","sourcesContent":["// @flow\n\nimport {\n  omitBy,\n  map,\n  isObject,\n  mapValues,\n  keyBy,\n  isEmpty,\n  flow,\n  trim,\n  isFunction,\n  isUndefined\n} from 'lodash/fp';\n\nimport type {\n  SortPropertiesT,\n  PagePropertiesT,\n  CreateQueryArgsT,\n  SearchTermT\n} from '../types';\n\nconst removeEmptyObjects = selector =>\n  omitBy(o => isUndefined(o) || (isObject(o) && isEmpty(o)))(selector);\n\nconst queryListFromTerm = (term: SearchTermT) =>\n  flow(\n    map(field => ({\n      [field]: {\n        $regex: term,\n        $options: 'i'\n      }\n    }))\n  );\n// using case-insensitive regex makes it slow, so we do a little hack\nconst queryForTerm = term => searchFields => ({\n  $or: queryListFromTerm(term)(\n    isFunction(searchFields) ? searchFields(term) : searchFields\n  )\n});\nconst termToTermList = term => (term ? term.split(' ').map(trim) : []);\n\nconst createFieldSearchQuery = (searchFields, terms, useTextIndex) =>\n  /*\n  two strategies: text search (if availble) or regex search\n  - in text search, if multiple terms are separated with space, every one should occure\n  */\n  ({\n    $or: [\n      // text search\n      ...(useTextIndex\n        ? [\n            {\n              $text: {\n                // quote terms, so that its an AND search\n                // see https://stackoverflow.com/a/16906099/1463534\n                $search: terms.map(t => `\"${t}\"`).join(' ')\n              }\n            }\n          ]\n        : []),\n      // regex search\n      // every\n      ...(searchFields\n        ? [\n            {\n              $and: map(term => queryForTerm(term)(searchFields))(terms)\n            }\n          ]\n        : [])\n    ]\n  });\n/* eslint import/prefer-default-export: 0 */\nexport const createQuery = ({\n  filter,\n  searchTerm,\n  searchFields,\n  filterToBaseQuery = f => f,\n  useTextIndex\n}: CreateQueryArgsT) => {\n  const $and = [];\n  if (!isEmpty(filter)) {\n    $and.push(removeEmptyObjects(filterToBaseQuery(filter)));\n  }\n  if (\n    !isEmpty(searchTerm) &&\n    (isFunction(searchFields) || !isEmpty(searchFields))\n  ) {\n    $and.push(\n      createFieldSearchQuery(\n        searchFields,\n        termToTermList(searchTerm),\n        useTextIndex\n      )\n    );\n  }\n\n  return !isEmpty($and) ? { $and } : {};\n};\n\nexport const sortPropsToMongoSort = flow(\n  keyBy('id'),\n  mapValues(({ sortAscending }) => (sortAscending ? 1 : -1))\n);\n\nconst pagePropertiesToLimitAndSkip = (\n  { currentPage, pageSize } = { currentPage: 1, pageSize: 50 }\n) => ({\n  limit: pageSize,\n  skip: (currentPage - 1) * pageSize\n});\n\nexport const createQueryOptions = ({\n  sortProperties,\n  pageProperties = null\n}: {\n  sortProperties: SortPropertiesT,\n  pageProperties: PagePropertiesT\n}) => {\n  const sort = sortPropsToMongoSort(sortProperties);\n\n  const limitAndSkip = pageProperties\n    ? pagePropertiesToLimitAndSkip(pageProperties)\n    : null;\n  return {\n    sort,\n    ...limitAndSkip\n  };\n};\n"]}