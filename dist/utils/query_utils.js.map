{"version":3,"sources":["../../src/utils/query_utils.js"],"names":["removeEmptyObjects","o","queryListFromTerm","field","$regex","term","$options","queryForTerm","$or","searchFields","termToTermList","split","map","createSearchQuery","terms","useTextIndex","$text","$search","t","join","$and","filterToQuery","filter","search","transformFilter","f","query","searchTerm","sortPropsToMongoSort","sortAscending","pagePropertiesToLimitAndSkip","currentPage","pageSize","limit","skip","gridOptionsToQueryOptions","sortProperties","pageProperties","sort","limitAndSkip"],"mappings":"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","file":"query_utils.js","sourcesContent":["import {\n  identity,\n  omitBy,\n  map,\n  isObject,\n  mapValues,\n  keyBy,\n  isEmpty,\n  flow,\n  trim,\n  isFunction\n} from 'lodash/fp';\n\nconst removeEmptyObjects = omitBy(o => isObject(o) && isEmpty(o));\n\nconst queryListFromTerm = term =>\n  flow(\n    map(field => ({\n      [field]: {\n        $regex: term,\n        $options: 'i'\n      }\n    }))\n  );\n// using case-insensitive regex makes it slow, so we do a little hack\nconst queryForTerm = term => searchFields => ({\n  $or: queryListFromTerm(term, identity)(\n    isFunction(searchFields) ? searchFields(term) : searchFields\n  )\n});\nconst termToTermList = term => term.split(' ').map(trim);\n\nconst createSearchQuery = (searchFields, terms, useTextIndex) =>\n  /*\n  two strategies: text search (if availble) or regex search\n  - in text search, if multiple terms are separated with space, every one should occure\n  */\n  ({\n    $or: [\n      // text search\n      ...(useTextIndex\n        ? [\n            {\n              $text: {\n                // quote terms, so that its an AND search\n                // see https://stackoverflow.com/a/16906099/1463534\n                $search: terms.map(t => `\"${t}\"`).join(' ')\n              }\n            }\n          ]\n        : []),\n      // regex search\n      // every\n      {\n        $and: map(term => queryForTerm(term)(searchFields))(terms)\n      }\n    ]\n  });\n/* eslint import/prefer-default-export: 0 */\nexport const filterToQuery = (\n  filter,\n  search,\n  transformFilter = f => f,\n  useTextIndex\n) => {\n  // console.log(\"got filter\", filter);\n  // console.log(\"got search\", search);\n  // console.log(\"usingtext :\", useTextIndex ? \"yes\" : \"no\");\n  // remove empty objects on filter\n  const query = {\n    ...(!isEmpty(filter) && removeEmptyObjects(transformFilter(filter))),\n    ...(!isEmpty(search) &&\n      (isFunction(search.searchFields) || !isEmpty(search.searchFields)) &&\n      !isEmpty(search.searchTerm) &&\n      createSearchQuery(\n        search.searchFields,\n        termToTermList(search.searchTerm),\n        useTextIndex\n      ))\n  };\n  return query;\n};\n\nexport const sortPropsToMongoSort = flow(\n  keyBy('id'),\n  mapValues(({ sortAscending }) => (sortAscending ? 1 : -1))\n);\n\nconst pagePropertiesToLimitAndSkip = (\n  { currentPage, pageSize } = { currentPage: 1, pageSize: 50 }\n) => ({\n  limit: pageSize,\n  skip: (currentPage - 1) * pageSize\n});\n\nexport const gridOptionsToQueryOptions = ({\n  sortProperties,\n  pageProperties = null\n}) => {\n  // console.log('got sortProperties', sortProperties);\n  const sort = sortPropsToMongoSort(sortProperties);\n  // console.log('mongo sort', sort);\n\n  const limitAndSkip = pageProperties\n    ? pagePropertiesToLimitAndSkip(pageProperties)\n    : null;\n  return {\n    sort,\n    ...limitAndSkip\n  };\n};\n"]}